#!/bin/sh
#
# Move the current window to monitor number N.
#
# Also works only on one X screen (which is the most common case).
#
# Props to
# http://icyrock.com/blog/2012/05/xubuntu-moving-windows-between-monitors/
#
# Unfortunately, both "xdotool getwindowgeometry --shell $window_id" and
# checking "-geometry" of "xwininfo -id $window_id" are not sufficient, as
# the first command does not respect panel/decoration offsets and the second
# will sometimes give a "-0-0" geometry. This is why we resort to "xwininfo".

set -e

target_monitor="$1"

# TODO get from conf or read from command: xrandr | grep ' connected'
monitor_widths=(1920 2560 1920)

window_id=$(xdotool getactivewindow)

# Remember if it was maximized.
window_horz_maxed=$(xprop -id "$window_id" _NET_WM_STATE | grep '_NET_WM_STATE_MAXIMIZED_HORZ' || true)
window_vert_maxed=$(xprop -id "$window_id" _NET_WM_STATE | grep '_NET_WM_STATE_MAXIMIZED_VERT' || true)

# Un-maximize current window so that we can move it
wmctrl -ir "$window_id" -b remove,maximized_vert,maximized_horz

# Read window position
x=$(xwininfo -id "$window_id" | awk '/Absolute upper-left X:/ { print $4 }')
y=$(xwininfo -id "$window_id" | awk '/Absolute upper-left Y:/ { print $4 }')

# Subtract any offsets caused by panels or window decorations
x_offset=$(xwininfo -id "$window_id" | awk '/Relative upper-left X:/ { print $4 }')
y_offset=$(xwininfo -id "$window_id" | awk '/Relative upper-left Y:/ { print $4 }')
x=$(( x - x_offset))
y=$(( y - y_offset))

# First calculate the X-position of the window on the current monitor (not needed when maximized)
if [ -n  "${window_horz_maxed}" ]; then
    # The x position can be messed up when un-maximizing and fall into another monitor, thus just set x to 0
    x_on_monitor=0
else
    # Calculate the x position locally on the current monitor
    x_on_monitor=$x
    for w in ${monitor_widths[@]}; do
        echo $w
        if [[ $x_on_monitor -gt $w ]]; then
            x_on_monitor=$((x_on_monitor - w))
        fi
    done
fi

# Then calculate the base offset from the target window
monitor_count=${#monitor_widths[@]}
monitor_start_x=0
for i in $(seq $monitor_count); do
    if [[ $i -lt $target_monitor ]]; then
        monitor_start_x=$((monitor_start_x + monitor_widths[i-1]))
        echo "Monitor x $monitor_start"
    fi
done
echo "start x $monitor_start_x"

new_x=$((monitor_start_x + x_on_monitor))

# Move the window
xdotool windowmove "$window_id" "$new_x" "$y"

# Maximize window again, if it was before
if [ -n "${window_horz_maxed}" ] && [ -n "${window_vert_maxed}" ]; then
    wmctrl -ir "$window_id" -b add,maximized_vert,maximized_horz
elif [ -n  "${window_horz_maxed}" ]; then
    wmctrl -ir "$window_id" -b add,maximized_horz
elif [ -n  "${window_vert_maxed}" ]; then
    wmctrl -ir "$window_id" -b add,maximized_vert
fi
