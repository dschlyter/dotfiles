# Path stuff

_add_to_path ~/.dotfiles/bin/mac

#
# Aliases
#

# display power management log for current day (mostly interesting for display lock / unlock times)
alias pmlog='open $(echo /var/log/powermanagement/2* | xargs -n 1 echo | tail -n 1)'
alias rau='reattach-to-user-namespace'
alias ij='rau open -a "IntelliJ IDEA" .'

alias -g CB='| pbcopy'
alias cp='pbpaste'
alias o='open'
alias sshot='screencapture -T 2 -t png -P screenshot.png'

#
# Util functions
#

function free() {
    vm_stat | perl -ne '/page size of (\d+)/ and $size=$1; /Pages\s+([^:]+)[^\d]+(\d+)/ and printf("%-16s % 16.2f Mi\n", "$1:", $2 * $size / 1048576);'
}

function port_user() {
    lsof -i tcp:"$1"
}


function cdf() {
    # requires tumult plugin
    cd $(finder-path)
}

# copy result from j into system clipboard, for use in gui apps
function jf() {
    DIR="$(fasd -l -d -R "$@" | take 1)"
    echo "$DIR"
    echo "$DIR" | pbcopy
}

function jform() {
    pbpaste | jq . | pbcopy
}

function nomov() {
    for file in *.mov; do
        ffmpeg -i "$file" "${file//.mov/.mp4}" && rm "$file"
    done
}

function handlemail() {
    cat /var/mail/$USER
    sudo rm /var/mail/$USER
}

# multi-user spotify can be buggy
# TODO remove one of these?
alias claimspotify2="(cd /Applications; sudo find Spotify.app -exec chmod 775 {} \;)"
alias cliamspotify='sudo find /Applications/Spotify.app -perm "+u+x" ! -perm "+o+x" -exec chmod og+x {} ;'
alias fix-spotlight='sudo mdutil -E /'


#
# GNU utils
#

# quick hack to make writing shell functions easier (even if reusability/porability suffers)
# run the correct executable on any OS with ${GNU_PREFIX}ls
export GNU_PREFIX="g"

# use updated coreutils and findutils from homebrew by default
function use_gnu() {
    has "g$1" && alias $1="g$1$2"
}

use_gnu cp ' -i'
use_gnu wc
use_gnu sed
use_gnu sort
use_gnu tac
use_gnu ln
use_gnu du
use_gnu stat
use_gnu xargs
use_gnu cal
use_gnu head
use_gnu tail
use_gnu find

# ls is set up with some custom aliases, but unset it if we don't have gnu ls installed
has gls || unset -f ls
has stat || unset -f _slow_fs

#
# Homebrew
#

# modify brew to make it work for multiple users
# everything is done with a single user, other users needs to 
function brew() {
    if [[ "$1" == "search" ]]; then
        /usr/local/bin/brew "$@"
        return
    fi

    BREW_USER="$(_brew_main_user)"
    if [[ "$BREW_USER" == "$(whoami)" ]]; then
        /usr/local/bin/brew "$@"
    else
        sudo -EH -u "$BREW_USER" /usr/local/bin/brew "$@"
    fi
}

function _brew_main_user() {
    ls -ld /usr/local/Homebrew | cl 3
}

# brew convinience function

BREW_UPDATE_FILE=/usr/local/.brew_lastupdate

function bup() {
    # TODO some better chown might be needed here
    if [[ "$BUP_GRAB" == 1 ]]; then
        grab /usr/local/etc
        grab /usr/local/bin
        grab /usr/local/sbin
    fi

    brew update || return 1

    date "+%s" > $BREW_UPDATE_FILE

    if [[ -n "$MULTIUSER_BREW" ]]; then
        sudo /opt/sudo/fix-brew-post-update
    fi
}

local NOW="$(date +%s)"
local LAST_UPDATE="0$(cat $BREW_UPDATE_FILE)"
local DIFF_DAYS=$((($NOW - $LAST_UPDATE) / (3600 * 24)))
if [ $DIFF_DAYS -gt 7 ]; then
    echo "Homebrew has not been upgraded in $DIFF_DAYS days. Run upgrade with 'bup'"
fi

#
# Other settings
#

export NNN_COPIER="copier"

# set tty for gpg
export GPG_TTY=$(tty)

# set iterm title to current dir
# credit to https://gist.github.com/phette23/5270658
precmd() {
    echo -ne "\e]1;${PWD##*/}\a"
}
