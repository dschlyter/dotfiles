#!/usr/bin/env python3

import argparse
import time
import sys
import signal
from typing import List

from dotlib.api import RestApi
from dotlib.fzf import fzf_match
from dotlib.util import print_table

api = RestApi()

def main():
    # https://docs.python.org/3/library/argparse.html
    global_parser = argparse.ArgumentParser(description='')

    global_parser.set_defaults(handler=lambda *args, **kwargs: read(1, 0))
    root_p = global_parser.add_subparsers()

    sp = root_p.add_parser('read', aliases=['r'], help='read time')
    sp.set_defaults(handler=read)
    sp.add_argument('start', help="date or N days ago (default 1 day ago)", default="1", nargs="?")
    sp.add_argument('end', help="date or N days ago (default 0)", default="0", nargs="?")

    sp = root_p.add_parser('time', aliases=['t'], help='summrize total time')
    sp.set_defaults(handler=stats)
    sp.add_argument('start', help="date or N days ago (inclusive, default 0)", default="0", nargs="?")
    sp.add_argument('end', help="date or N days ago (inclusive, default 0)", default="0", nargs="?")
    sp.add_argument('--activities', '-a', help="comma separated list of activities to filter for", default=None)
    sp.add_argument('--window', '-w', choices=["day", "week", "month", "q", "year", "all"], help="level of granularity (default day)", default="day")
    sp.add_argument('--root', '-r', help="aggregate up to root activities", action="store_true")
    sp.add_argument('--count', '-c', help="count occurences instead of summing time", action="store_true")
    sp.add_argument('--top', '-t', help="show top 10 per line", action="store_true")

    sp = root_p.add_parser('start', aliases=['s'], help='mark new segment')
    sp.set_defaults(handler=start)
    sp.add_argument('minutes', help="X minutes, XhY or HH:MM", nargs="?")

    sp = root_p.add_parser('delete', aliases=['d'], help='delete segment or mark')
    sp.set_defaults(handler=delete)
    sp.add_argument('time', help="time of segment")

    sp = root_p.add_parser('end', aliases=['e'], help='end segment')
    sp.set_defaults(handler=end)
    sp.add_argument('args', help="[acitivity] [duration]", nargs="*")
    sp.add_argument('--start', '-s', help='start of the segment')
    sp.add_argument('--end', '-e', help='end of the segment')

    sp = root_p.add_parser('extend', aliases=['ex'], help='extend existing segment')
    sp.set_defaults(handler=extend)
    sp.add_argument('args', help="[segment id] [duration] - default to last segment", nargs="*")

    sp = root_p.add_parser('activity', aliases=['a'], help='list and manage activities (has subcommands)')
    # sp.set_defaults(handler=lambda *args, **kwargs: list_activities("open"))
    sp.set_defaults(handler=list_activities)
    sp.add_argument('--status', '-s', help="status to list", choices=["open", "closed", "all"], default="open")

    activity_p = sp.add_subparsers()

    sp = activity_p.add_parser('list', aliases=['l'], help='list activities')
    sp.set_defaults(handler=list_activities)
    sp.add_argument('--status', '-s', help="status to list", choices=["open", "closed", "all"], default="open")

    sp = activity_p.add_parser('add', help='add activity')
    sp.set_defaults(handler=add_activity)
    sp.add_argument('activity', help="name of activity")
    sp.add_argument('parent', help="name of parent, or '' to remove parent", nargs="?")

    sp = activity_p.add_parser('remove', help='remove activity')
    sp.set_defaults(handler=remove_activity)
    sp.add_argument('activity', help="name of activity")

    sp = activity_p.add_parser('parent', help='update parent')
    sp.set_defaults(handler=set_parent)
    sp.add_argument('activity', help="name of activity")
    sp.add_argument('parent', help="name of parent, or '-' to remove parent")

    sp = activity_p.add_parser('close', help='close activity')
    sp.set_defaults(handler=activity_close)
    sp.add_argument('activity', help="name of activity")

    sp = activity_p.add_parser('open', help='close activity')
    sp.set_defaults(handler=activity_open)
    sp.add_argument('activity', help="name of activity")

    parsed_args = global_parser.parse_args()
    # Note: All handlers must have **kwargs to handle global args
    parsed_args.handler(**parsed_args.__dict__)


def read(start, end, **global_args):
    res = api.get(f"api/time4/segments/{start}/{end}")
    last_date = None
    for s in res.get('segments', []):
        s_date = s.get('date')
        if last_date and last_date != s_date:
            print("---", s_date, "---")
        last_date = s_date

        print(_display_segment(s, show_end=False, show_zero_h=False))


def stats(start, end, activities, window, root, count, top, **global_args):
    res = api.post(f"api/time4/stats", {
        'start': start,
        'end': end,
        'activities': activities.split(",") if activities else None,
        'window': window,
        'root': root,
        'count': count,
    })

    s = res['stats']

    if 'total' not in s:
        print("No data")
        return

    rows = sorted(s.keys(), key=lambda k: s[k]['total'], reverse=True)
    cols = sorted(s['total'].keys())
    if len(cols) == 2:
        cols.remove('total')

    if not top:
        table = [[""]]
        year_prefixes = {c[0:5] for c in cols if c != "total"}
        
        for col_name in cols:
            if len(year_prefixes) == 1 and next(iter(year_prefixes)) == col_name[0:5]:
                col_name = col_name[5:]
            table[-1].append(col_name)
        for r in rows:
            table.append([r])
            for c in cols:
                v = s[r].get(c, 0)
                display = _display_duration(v, show_zero_h=False) if not count else v
                table[-1].append(display)

        print_table(table, fit=True)
    else:
        table = []
        for c in cols:
            table.append([c])
            entries = [(s[r][c], r) for r in rows if c in s[r] and r != "total"]
            entries = sorted(entries, reverse=True)
            for i in range(5):
                if i < len(entries):
                    e = entries[i]
                    table[-1].append(f"{_display_duration(e[0], show_zero_h=False, no_pad=True)} {e[1]}")
                else:
                    table[-1].append("")
                # print(f"{_display_duration(e[0], show_zero_h=False, no_pad=True)} {e[1]}", end=" ")
        print_table(table, fit=True)


def start(minutes=None, **global_args):
    try:
        res = api.post(f"api/time4/mark", {"time": minutes})
        if r := res.get('result'):
            duration = f"marking a {_display_duration(r.get('minutes'))}m segment" if r.get('minutes') > 0 else ""
            print(f"created mark {r.get('marks')} {duration}")
        else:
            print("no mark created")
    except:
        pass


def delete(time, **global_args):
    res = api.delete(f"api/time4/segments/{time}")
    if s := res.get('segment'):
        print("deleted", _display_segment(s))
    else:
        print("nothing to delete")


def end(args, start, end, **global_args):
    payload = {}

    if len(args) > 2:
        print("Too many arguments")
        quit(1)

    if len(args) >= 1:
        if _is_time_arg(args[0]):
            payload['duration'] = args[0]
        else:
            payload['activity'] = args[0]
    if len(args) == 2:
        if _is_time_arg(args[1]):
            payload['duration'] = args[1]
        else:
            payload['activity'] = args[1]

    if start:
        payload['start'] = start

    if end:
        payload['end'] = end
    elif payload.get('duration', '').startswith("-"):
        payload['end'] = payload['duration'][1:]
        del payload['duration']
        
    if payload.get('activity') is None:
        activities = api.get("api/time4/activities")
        names = [a['id'] for a in activities.get('activities', [])]
        selected = fzf_match(names, sort=False)
        if not selected:
            print("No activity selected")
            quit(1)
        payload['activity'] = selected

    try:
        res = api.post("api/time4/segments", payload)
        print("ended", _display_segment(res.get('segment')))
        pass
    except Exception as e:
        print(e)
        pass


def extend(args, **global_args):
    time, minutes = "last", 0

    if len(args) > 2:
        print("Too many arguments")
        quit(1)

    if len(args) >= 1:
        if args[0].isdigit():
            minutes = int(args[0])
        else:
            time = args[0]
    if len(args) >= 2:
        minutes = int(args[1])

    try:
        res = api.post(f"api/time4/segments/{time}/extend", {"minutes": minutes})
        if s := res.get('segment'):
            print("updated", _display_segment(s))
        else:
            print("nothing to delete")
    except Exception as e:
        pass


def add_activity(activity, parent, **global_args):
    try:
        entry = {"activity": activity}
        if parent:
            entry['parent'] = parent
        api.post("api/time4/activities", entry)
    except Exception as e:
        pass


def remove_activity(activity, **global_args):
    try:
        api.delete("api/time4/activities/" + activity)
    except Exception as e:
        pass


def list_activities(status, **global_args):
    res = api.get(f"api/time4/activities?status={status}")
    activities = []
    for a in res.get('activities', []):
        activities.append(" > ".join((a.get('lineage', []) + [a['id']])) + (" (closed)" if a.get('status') == "closed" else ""))
    for a in sorted(activities):
        print(a)


def set_parent(activity, parent, **global_args):
    try:
        api.put(f"api/time4/activities/{activity}/parent/{parent}", {})
    except Exception as e:
        pass


def activity_close(activity, **global_args):
    try:
        api.put(f"api/time4/activities/{activity}/status/closed", {})
    except Exception as e:
        pass


def activity_open(activity, **global_args):
    try:
        api.put(f"api/time4/activities/{activity}/status/open", {})
    except Exception as e:
        pass


def _is_time_arg(arg):
    return arg is not None and (arg[0].isdigit() or arg[0] == "-")


def _display_segment(segment, show_end=True, show_zero_h=True):
    try:
        sid = segment['id']
        time = sid.split("T")[1][0:5]
        end_time = ""
        if show_end:
            end_time = " - " + segment['end'].split("T")[1][0:5] if segment.get('end') and segment.get('end') != sid else ""
        minutes = segment['minutes']
        duration = "\t" + _display_duration(minutes, show_zero_h=show_zero_h) if minutes > 0 else ""
        return f"{time}{end_time}{duration}\t{segment['activity']}"
    except:
        print("Error displaying segment", segment)
        return ""


def _display_duration(minutes, show_zero_h=True, no_pad=False):
    if not show_zero_h and minutes < 60:
        return ("   " if not no_pad else "") + f"{minutes}"
    return f"{minutes // 60}h {minutes % 60:02d}"


def wait_or_keypress():
    def handler():
        pass
    try:
        signal.signal(signal.SIGALRM, handler)
        signal.alarm(5)
        input("...")
        print()
        # disable the alarm
        signal.alarm(0)
    except:
        pass


def get(list, i):
    return list[i] if len(list) > i else None

if __name__ == '__main__':
    main()
