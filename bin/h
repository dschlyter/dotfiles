#!/usr/bin/env python3

import argparse
import time
import sys
import signal
from typing import List

from dotlib.api import RestApi
from dotlib.fzf import fzf_match

api = RestApi()

def main():
    # https://docs.python.org/3/library/argparse.html
    global_parser = argparse.ArgumentParser(description='')

    global_parser.set_defaults(handler=lambda *args, **kwargs: global_parser.print_help())
    sub_ps = global_parser.add_subparsers()

    sp = sub_ps.add_parser('read', aliases=['r'], help='read time')
    sp.set_defaults(handler=read)

    sp = sub_ps.add_parser('start', aliases=['s'], help='start new segment')
    sp.set_defaults(handler=start)
    sp.add_argument('minutes', help="X minutes, XhY or HH:MM", nargs="?")

    sp = sub_ps.add_parser('end', aliases=['e'], help='end segment')
    sp.set_defaults(handler=end)
    sp.add_argument('activity_or_minutes', help="name of activity, or duration (including negative amount)", nargs="*")
    sp.add_argument('--start', '-s', help="discard remaining and start new", action="store_true")

    sp = sub_ps.add_parser('delay', aliases=['d'], help='delay current segment')
    sp.set_defaults(handler=delay)
    sp.add_argument('minutes', help="X minutes, XhY")

    sp = sub_ps.add_parser('add', aliases=['a'], help='add to current segment')
    sp.set_defaults(handler=add)
    sp.add_argument('minutes', help="X minutes, XhY")

    sp = sub_ps.add_parser('repl', help='start a repl')
    sp.set_defaults(handler=repl)

    parsed_args = global_parser.parse_args()
    # Note: All handlers must have **kwargs to handle global args
    parsed_args.handler(**parsed_args.__dict__)


def read(**global_args):
    print(api.get("api/time/read-extended"))


def start(minutes=None, **global_args):
    if minutes:
        print(api.get(f"api/time/start/{minutes}"))
    else:
        print(api.get(f"api/time/start"))


def end(activity_or_minutes, **global_args):
    a = activity_or_minutes
    if get(a, 0) in ["", "-"]:
        print(api.get("api/time/end"))
        return

    # parse into list of tuples (activity, duration)
    # allow flexibility look at the first arg to decide if durations come first or second
    reports = []
    duration_first = _is_duration(get(a, 0))
    i = 0
    while i < len(a):
        a1 = get(a, i)
        a2 = get(a, i+1)
        if _is_duration(a1):
            if duration_first and not _is_duration(a2):
                reports.append((a2, a1))
                i += 2
            else:
                reports.append((None, a1))
                i += 1
        else:
            if not duration_first and _is_duration(a2):
                reports.append((a1, a2))
                i += 2
            else:
                reports.append((a1, None))
                i += 1

    if len([1 for _, duration in reports if duration is None]) > 1:
        print("Only one duration can be unspecified")
        quit(1)

    if reports == []:
        reports = [(None, None)]
        
    for i, (activity, duration) in enumerate(reports):
        if activity is None:
            activities = api.get("api/time/activities").split("\n")
            activity = fzf_match(activities, sort=False)
            reports[i] = (activity, duration)
            if not activity:
                print("No activity selected")
                quit(1)

    for activity, duration in reports:
        if duration is not None:
            print(api.get(f"api/time/end/{activity}/{duration}"))
        else:
            print(api.get(f"api/time/end/{activity}"))
        
    if global_args.get("start"):
        print(api.get("api/time/start"))


def _is_duration(arg):
    return arg is not None and (arg[0].isdigit() or arg[0] == "-")


def delay(minutes, **global_args):
    print(api.get(f"api/time/shorten/{minutes}"))


def add(minutes, **global_args):
    print(api.get(f"api/time/lengthen/{minutes}"))


def split(minutes, **global_args):
    print(api.get(f"api/time/split/{minutes}"))


def repl(**global_args):
    cmds = {
        "": lambda: print("-"),
        "delay": lambda: delay(input("minutes: ")),
        "extend": lambda: extend(input("minutes: ")),
        "split": lambda: split(input("minutes: ")),
        "report": lambda: start(input("minutes: ")),
        "start": lambda: start(),
        "end": lambda: end("-"),
        "view": lambda: read(),
    }
    while True:
        activities = api.get("api/time/activities").split("\n")
        cmd_keys = list(cmds.keys())
        pick = fzf_match(activities + cmd_keys, sort=False)
        if pick in cmds:
            cmds[pick]()
        elif pick:
            end(pick)
        else:
            quit()
        wait_or_keypress()


def wait_or_keypress():
    def handler():
        pass
    try:
        signal.signal(signal.SIGALRM, handler)
        signal.alarm(5)
        input("...")
        print()
        # disable the alarm
        signal.alarm(0)
    except:
        pass


def get(list, i):
    return list[i] if len(list) > i else None

if __name__ == '__main__':
    main()
