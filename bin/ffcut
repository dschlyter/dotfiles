#!/usr/bin/env python3

import argparse
import subprocess
import textwrap
import os
import unittest
import sys
import time
from typing import List


def main():
    # https://docs.python.org/3/library/argparse.html
    main_p = argparse.ArgumentParser(description='Simple cut and merge utility. Provide a list of files and optionally timestamps.',)

    main_p.set_defaults(handler=cut)

    main_p.add_argument('files_and_times', nargs='+', help='ffcut file1 [00:00 00:10] [00:20 00:30] [file2] ...')
    main_p.add_argument('--reenc', action='store_true', help='reencode with default settings, instead of the default copying (faster)')
    main_p.add_argument('--mid', action='store_true', help='1080p with 3M bitrate')
    main_p.add_argument('--small', action='store_true', help='720p with hevc_nvenc (GPU)')
    main_p.add_argument('--smaller', action='store_true', help='720p with libx264')
    main_p.add_argument('--smallest', action='store_true', help='720p with libx265')
    main_p.add_argument('--scale', default="1280", help='scale to use for small cuts, default is 1280 (width)')
    main_p.add_argument('--quality', default="28", help='quality to use for small cuts, default is 28 (higher is better, ffmpeg default is 23)')

    parsed_args = main_p.parse_args()
    # Note: All handlers must have **kwargs to handle global args
    parsed_args.handler(**parsed_args.__dict__)


def cut(files_and_times: List[str], reenc, mid, small, smaller, smallest, scale, quality, **global_args):
    args = files_and_times

    video_args = "-c copy".split(" ")
    output_suffix = "_CUT"
    key = (reenc and "reenc") or (mid and "mid") or (small and "small") or (smaller and "smaller") or (smallest and "smallest") or None
    if key:
        video_args = {
            "reenc": [],
            "mid": "-vf scale='min(1920,iw)':'min(1080,ih)' -c:v libx264 -b:v 3M -maxrate 3M -bufsize 10M".split(" "),
            "small": f"-vf scale='min({scale},iw)':-2 -c:v hevc_nvenc -rc vbr -cq {quality}".split(" "),
            "smaller": f"-vf scale='min({scale},iw)':-2 -c:v libx264 -crf {quality}".split(" "),
            "smallest": f"-vf scale='min({scale},iw)':-2 -c:v libx265 -crf {quality}".split(" "),
        }.get(key, video_args)
        output_suffix = f"_{key.upper()}_{scale}_{quality}"

    files_to_process = []

    print(video_args)

    i = 0
    while i < len(args):
        file = args[i]
        if not os.path.exists(file):
            print("File does not exist:", file)
            sys.exit(1)
        i += 1
        cuts = []
        while i < len(args) and ":" in args[i]:
            cuts.append(args[i])
            i += 1
        if len(cuts) % 2 != 0:
            print("Error: cuts must be in pairs")
            sys.exit(1)
        files_to_process.append((file, cuts))

    if len(files_to_process) == 0:
        print("No files to process")
        sys.exit(0)

    if len(files_to_process) == 1 and len(files_to_process[0][1]) == 0 and len(video_args) == 2:
        print("Just one file and nothing to cut")
        sys.exit(0)
    output_file = os.path.splitext(args[0])[0] + output_suffix + ".mp4"

    if len(files_to_process) == 1 and len(files_to_process[0][1]) <= 2:
        direct_cut(files_to_process, output_file, video_args)
    else:
        multi_file_cut(files_to_process, output_file, video_args)


def direct_cut(files_to_process: List[str], output_file: str, video_args):
    print("Using direct cut mode")
    file = files_to_process[0][0]
    if len(files_to_process[0][1]) >= 2:
        start, end = files_to_process[0][1]
        subprocess.check_call(["ffmpeg", "-ss", start, "-to", end, "-i", file] + video_args + [output_file])
    else:
        subprocess.check_call(["ffmpeg", "-i", file] + video_args + [output_file])


def multi_file_cut(files_to_process: List[str], output_file: str, video_args):
    print("Using multi cut mode")

    random_id = os.urandom(4).hex()
    files_to_merge = []
    tmp_files = []

    for file, cuts in files_to_process:
        for i in range(0, len(cuts), 2):
            s = list(map(int, cuts[i].split(":")))
            e = list(map(int, cuts[i+1].split(":")))
            while len(s) < len(e):
                s = [0] + s
            if e <= s:
                print("Error", cuts[i], "must be before", cuts[i+1])
                quit(1)

    for file, cuts in files_to_process:
        if len(cuts) == 0:
            files_to_merge.append(file)
            continue
        for i in range(0, len(cuts), 2):
            start, end = cuts[i], cuts[i + 1]
            cut_file = f"tmpffcut_{file.replace(' ', '_')}_{random_id}_{start.replace(':', '_')}_{end.replace(':', '_')}.mp4".replace("'", "-")
            subprocess.check_call(["ffmpeg", "-ss", start, "-to", end, "-i", file, "-c", "copy", cut_file])
            tmp_files.append(cut_file)
            files_to_merge.append(cut_file)

    # write files_to_merge to a file
    tmp_file_list = f"tmpffcut_{random_id}.txt"
    with open(tmp_file_list, "w") as f:
        for file in files_to_merge:
            f.write(f"file '{file}'\n")

    time.sleep(1)

    subprocess.check_call(["ffmpeg", "-f", "concat", "-safe", "0", "-i", tmp_file_list] + video_args + [output_file])

    for tmp_file in tmp_files:
        if os.path.exists(tmp_file):
            os.remove(tmp_file)
    os.remove(tmp_file_list)


if __name__ == '__main__':
    main()
