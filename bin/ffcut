#!/usr/bin/env python3

import argparse
import subprocess
import textwrap
import os
import sys
import unittest
import time
from typing import List

# Simple cut and merge utility

def usage():
    print("Simple cut and merge utility")
    print("Supply a file or list of files, and optionally a list of time ranges to cut")
    print("Usage: ffcut file1 [00:00 00:10] [00:20 00:30] [file2] ...")
    print("Flags:")
    print("ffcut --reenc file1 ...  # reencode with default settings, instead of the default copying (faster)")
    print("ffcut --small/--smaller/--smallest file1 ...  # reencode to default small size (at most 1920x1080) with slightly less quality, smaller is slower")


def main():
    if len(sys.argv) == 1 or sys.argv[1] in ["-h", "--help"]:
        usage()
        sys.exit(0)

    args = sys.argv
    video_args = "-c copy".split(" ")
    output_suffix = "_CUT"
    if len(args) > 1 and args[1].startswith("-"):
        key = args[1].replace("-", "")
        video_args = {
            "reenc": [],
            "small": "-vf scale='min(1920,iw)':-2 -c:v hevc_nvenc -rc vbr -cq 28".split(" "),
            "smaller": "-vf scale='min(1920,iw)':-2 -c:v libx264 -crf 23".split(" "),
            "smallest": "-vf scale='min(1920,iw)':-2 -c:v libx265 -crf 28".split(" "),
        }.get(key, video_args)
        args = args[1:]
        if len(args) == 2:
            output_suffix = "_" + key.upper()
    if len(args) > 1 and args[1].startswith("-"):
        print("Unknown option:", args[1])
        sys.exit(1)

    files_to_process = []

    i = 1
    while i < len(args):
        file = args[i]
        if not os.path.exists(file):
            print("File does not exist:", file)
            sys.exit(1)
        i += 1
        cuts = []
        while i < len(args) and ":" in args[i]:
            cuts.append(args[i])
            i += 1
        if len(cuts) % 2 != 0:
            print("Error: cuts must be in pairs")
            sys.exit(1)
        files_to_process.append((file, cuts))

    if len(files_to_process) == 0:
        print("No files to process")
        sys.exit(0)

    if len(files_to_process) == 1 and len(files_to_process[0][1]) == 0 and len(video_args) == 2:
        print("Just one file and nothing to cut")
        sys.exit(0)
    output_file = os.path.splitext(args[1])[0] + output_suffix + ".mp4"

    if len(files_to_process) == 1 and len(files_to_process[0][1]) <= 2:
        direct_cut(files_to_process, output_file, video_args)
    else:
        multi_file_cut(files_to_process, output_file, video_args)


def direct_cut(files_to_process: List[str], output_file: str, video_args):
    print("Using direct cut mode")
    file = files_to_process[0][0]
    if len(files_to_process[0][1]) >= 2:
        start, end = files_to_process[0][1]
        subprocess.check_call(["ffmpeg", "-ss", start, "-to", end, "-i", file] + video_args + [output_file])
    else:
        subprocess.check_call(["ffmpeg", "-i", file] + video_args + [output_file])


def multi_file_cut(files_to_process: List[str], output_file: str, video_args):
    print("Using multi cut mode")

    random_id = os.urandom(4).hex()
    files_to_merge = []
    tmp_files = []
    for file, cuts in files_to_process:
        if len(cuts) == 0:
            files_to_merge.append(file)
            continue
        for i in range(0, len(cuts), 2):
            start, end = cuts[i], cuts[i + 1]
            cut_file = f"tmpffcut_{file}_{random_id}_{start.replace(":", "_")}_{end.replace(":", "_")}.mp4"
            subprocess.check_call(["ffmpeg", "-ss", start, "-to", end, "-i", file, "-c", "copy", cut_file])
            tmp_files.append(cut_file)
            files_to_merge.append(cut_file)

    # write files_to_merge to a file
    tmp_file_list = f"tmpffcut_{random_id}.txt"
    with open(tmp_file_list, "w") as f:
        for file in files_to_merge:
            f.write(f"file '{file}'\n")

    time.sleep(1)

    subprocess.check_call(["ffmpeg", "-f", "concat", "-safe", "0", "-i", tmp_file_list] + video_args + [output_file])

    for tmp_file in tmp_files:
        if os.path.exists(tmp_file):
            os.remove(tmp_file)
    os.remove(tmp_file_list)

if __name__ == "__main__":
    main()
