#!/usr/bin/env python3

# Run cron scripts with logging, success callback and error callback

# Pro tip: PATH=... on top of file to make cron behave like your shell
import json
import os

import sys
from datetime import datetime

# hacky way to get a relative load
from urllib.parse import urljoin

scriptPath = os.path.realpath(os.path.dirname(sys.argv[0]))
os.chdir(scriptPath)

from python.dotfiles import run, execute, load_conf

LOG_DIR = os.environ['HOME']+'/.logs/cron-run/'
CONF = os.environ['HOME']+'/.config/cron-run.json'


def main():
    try:
        run_and_report()
    except Exception as ex:
        job_name = sys.argv[1] if len(sys.argv) > 1 else 'unknown'
        report_error(job_name, "cron-run internal error " + str(ex))


def run_and_report():
    job_name = sys.argv[1]
    cmd = " ".join(sys.argv[2:])
    code, stdout, stderr = execute(cmd)

    stdout = (stdout or b'').decode('utf-8')
    stderr = (stderr or b'').decode('utf-8')
    print(stdout)
    print(stderr)

    if not os.path.exists(LOG_DIR):
        os.makedirs(LOG_DIR)

    with open("{}/{}.log".format(LOG_DIR, job_name), 'a') as file:
        file.write("\n\n")
        file.write(datetime.now().isoformat()+"\n")
        file.write("stdout:")
        file.write(stdout)
        file.write("stderr:")
        file.write(stderr)

    if code == 0:
        healthcheck(job_name)
    else:
        report_error(job_name, stderr)


def healthcheck(job_name):
    conf = load_conf(CONF, {})
    url = conf.get('healthcheck')
    if url:
        run('curl -X POST {} -F message="cron-run success"'.format(urljoin(url, job_name)))
        print("Healthcheck poked")
    else:
        print("Unable to load conf, cannot trigger healthcheck")


def report_error(job_name, error_msg):
    conf = load_conf(CONF, {})
    slack_url = conf.get('slack')
    if slack_url:
        json_data = {
            'username': 'cron-run',
            'icon_emoji': ':ghost:',
            'text': '{} failed :/ Error: {}'.format(job_name, error_msg),
        }
        run('curl -X POST --data-urlencode \'payload={}\' {}'.format(json.dumps(json_data), slack_url))
        print("Error hook poked")
    else:
        print("Unable to load conf, cannot trigger error hook")


if __name__ == '__main__':
    main()
