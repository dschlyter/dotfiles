#!/usr/bin/env python3

import argparse
import time
from typing import List

from dotlib.api import RestApi
from dotlib.fzf import fzf_match

api = RestApi()

def main():
    # https://docs.python.org/3/library/argparse.html
    global_parser = argparse.ArgumentParser(description='')

    global_parser.set_defaults(handler=lambda *args, **kwargs: global_parser.print_help())
    sub_ps = global_parser.add_subparsers()

    sp = sub_ps.add_parser('read', aliases=['r'], help='read time')
    sp.set_defaults(handler=read)

    sp = sub_ps.add_parser('start', aliases=['s'], help='start new')
    sp.set_defaults(handler=start)
    sp.add_argument('minutes', nargs="?", type=int)

    sp = sub_ps.add_parser('end', aliases=['e'], help='finish')
    sp.set_defaults(handler=end)
    sp.add_argument('activity', nargs="?")
    sp.add_argument('minutes', nargs="?")

    sp = sub_ps.add_parser('delay', help='shorten current segment')
    sp.set_defaults(handler=delay)
    sp.add_argument('minutes', type=int)

    sp = sub_ps.add_parser('extend', help='extend current segment')
    sp.set_defaults(handler=extend)
    sp.add_argument('minutes', type=int)

    sp = sub_ps.add_parser('split', help='split off part of the current segment')
    sp.set_defaults(handler=split)
    sp.add_argument('minutes', type=int)

    sp = sub_ps.add_parser('repl', help='start a repl')
    sp.set_defaults(handler=repl)

    parsed_args = global_parser.parse_args()
    # Note: All handlers must have **kwargs to handle global args
    parsed_args.handler(**parsed_args.__dict__)


def read(**global_args):
    print(api.get("api/time/read"))


def start(minutes=None, **global_args):
    if minutes:
        print(api.get(f"api/time/start/{minutes}"))
    else:
        print(api.get(f"api/time/start"))


def end(activity=None, minutes=None, **global_args):
    if minutes:
        start(minutes)

    if activity == "" or activity == "-":
        print(api.get("api/time/end"))
    elif activity:
        print(api.get(f"api/time/end/{activity}"))
    else:
        activities = api.get("api/time/activities").split("\n")
        pick = fzf_match(activities, sort=False)
        if pick:
            print(api.get(f"api/time/end/{pick}"))

def delay(minutes, **global_args):
    print(api.get(f"api/time/shorten/{minutes}"))


def extend(minutes, **global_args):
    print(api.get(f"api/time/lengthen/{minutes}"))


def split(minutes, **global_args):
    print(api.get(f"api/time/split/{minutes}"))


def repl(**global_args):
    cmds = {
        "": lambda: print("-"),
        "delay": lambda: delay(input("minutes: ")),
        "extend": lambda: extend(input("minutes: ")),
        "split": lambda: split(input("minutes: ")),
        "report": lambda: start(input("minutes: ")),
        "start": lambda: start(),
        "end": lambda: end("-"),
        "view": lambda: read(),
    }
    while True:
        activities = api.get("api/time/activities").split("\n")
        cmd_keys = list(cmds.keys())
        pick = fzf_match(activities + cmd_keys, sort=False)
        if pick in cmds:
            cmds[pick]()
            time.sleep(2)
        else:
            end(pick)


if __name__ == '__main__':
    main()
