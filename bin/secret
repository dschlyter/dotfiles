#!/bin/bash

# Encrypt and decrypt using ssh key

# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail
IFS=$'\n\t'

usage() {
    echo "Usage: $0 github|encrypt|decrypt key"
    echo "Usage: $0 openssl generate|show|encrypt|decrypt"
    echo "Note: key should be public ssh key when encrypting and private when decrypting"
}

if [[ -z "${2:-}" ]]; then
    usage
    exit 1
fi

cmd="$1"
ssh_key="$2"

if [[ "$cmd" == "github" ]]; then
    user="$2"
    curl "https://github.com/${user}.keys" | head -n 1 > /tmp/pubkey
    chmod og-rw /tmp/pubkey
    $0 encrypt /tmp/pubkey
    rm /tmp/pubkey
elif [[ "$cmd" == "openssl" ]]; then
    if [[ "$ssh_key" == "generate" ]]; then
        key="$HOME/.ssh/secret_key.pem"
        if [[ ! -f "$key" ]]; then
            echo "Generating keys $key"
            openssl genrsa -out "$key"
            openssl rsa -in "$key" -out $HOME/.ssh/secret_key.pub -pubout
        fi
    elif [[ "$ssh_key" == "show" ]]; then
        echo "Getting a secret"
        echo "1. They encrypt"
        echo "key=\"\$(echo $(cat .ssh/secret_key.pub | base64) | base64 -D)\""
        echo '${EDITOR:-nano} secretfile; openssl rsautl -pubin -in secretfile -inkey <(echo $key) -encrypt | base64; rm secretfile'
        echo "2. You decrypt"
        echo 'secret openssl decrypt'
        echo
        echo "Sending a secret"
        echo "1. Generate key"
        echo 'openssl genrsa -out secret_key.pem; openssl rsa -in secret_key.pem -pubout'
        echo "2. You encrypt"
        echo 'secret openssl encrypt'
        echo "3. They decrypt"
        echo '${EDITOR:-nano} secretfile'
        echo 'cat secretfile | base64 -D | openssl rsatil -inkey secret_key.pem -decrypt'
        echo 'rm secretfile'
    elif [[ "$ssh_key" == "encrypt" ]]; then
        vim keyfile
        vim secretfile
        openssl rsautl -pubin -in secretfile -inkey keyfile -encrypt | base64
        rm secretfile keyfile
    elif [[ "$ssh_key" == "decrypt" ]]; then
        vim secretfile
        cat secretfile | base64 -D | openssl rsautl -inkey ~/.ssh/secret_key.pem -decrypt
        rm secretfile
    fi
elif [[ "$cmd" == "encrypt" ]]; then
    tmp="/var/tmp/tmp-secret-key-$$"
    ssh-keygen -f "$ssh_key" -e -m PKCS8 > "$tmp"
    if [[ -t 1 ]]; then
        printf "message to encrypt:"
    fi
    read message
    encrypted=$(openssl rsautl -encrypt -pubin -inkey "$tmp" -in <(echo $message) | base64)
    rm "$tmp"

    if [[ -t 1 ]]; then
        echo "Decrypt with: echo \"$encrypted\" | base64 --decode | openssl rsautl -decrypt -inkey ~/.ssh/id_rsa"
    else
        echo "$encrypted"
    fi
elif [[ "$cmd" == "decrypt" ]]; then
    if [[ -t 1 ]]; then
        printf "message to decrypt:"
    fi
    read message
    echo "$message" | base64 --decode | openssl rsautl -decrypt -inkey ~/.ssh/"$key"
else
    usage
fi
