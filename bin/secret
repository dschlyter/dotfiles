#!/bin/bash

# Util to simplify sending a receiving secrets using openssl generated keys

# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail
IFS=$'\n\t'

cmd="${1:-}"

key="$HOME/.ssh/secret_key.pem"

if [[ ! -f "$key" ]]; then
    echo "Generating a key for you!"
    openssl genrsa -out "$key"
fi

if [[ -z "$cmd" ]]; then
    echo "Usage: $0 send|receive"
    echo "Send and receive credentials with openssl public keys"
    echo
    echo "Sending a secret"
    echo "1. They need to send or generate a public key"
    echo 'openssl genrsa -out secret_key.pem; openssl rsa -in secret_key.pem -pubout'
    echo "2. You encrypt"
    echo 'secret send'
    echo "3. They decrypt"
    echo '${EDITOR:-nano} secretfile'
    echo 'cat secretfile | base64 -D | openssl rsatil -inkey secret_key.pem -decrypt'
    echo 'rm secretfile'
    echo
    echo "Getting a secret"
    echo "1. They encrypt"
    echo "key=\"\$(echo $(cat "$key" | openssl rsa -pubout | base64) | base64 -D)\""
    echo '${EDITOR:-nano} secretfile; openssl rsautl -pubin -in secretfile -inkey <(echo $key) -encrypt | base64; rm secretfile'
    echo "2. You decrypt"
    echo 'secret receive'
elif [[ "$cmd" == "send" ]]; then
    vim their-public-key
    vim secretfile
    encrypted=$(openssl rsautl -pubin -in secretfile -inkey their-public-key -encrypt | base64)
    rm their-public-key secretfile
    echo 'echo "$encrypted" | base64 -D | openssl rsatil -inkey secret_key.pem -decrypt | rm secretfile'
elif [[ "$cmd" == "receive" ]]; then
    vim secretfile
    cat secretfile | base64 -D | openssl rsautl -inkey ~/.ssh/secret_key.pem -decrypt
    rm secretfile
fi
