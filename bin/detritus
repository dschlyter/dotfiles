#!/usr/bin/env python3

# Solver for Sorcerers Detritus game - https://chz.itch.io/the-sorcerers-detritus
# Runs best with: pypy3 =detritus 7

import sys
import os
import unittest
import queue
from collections import defaultdict

levels = [
"""
#############
 #   #     ##
 #   # k_  X>
 ####### # ##
H   _  # ###
####   # #
#### __# #
####   # #
####     #
##########
""",
"""
#######
#    # 
#  k # 
#  ### 
#    X>
#  ####
#    # 
H    # 
######
""",
"""
#######
#     #
#  =  ##
H     X>
########
""",
"""
########
#  #####
#     X>
## ## ##
 #    ##
##    ##
H  k  ##
## ## ##
## ## ##
#      #
########
""",
"""
#########
# k    #
# #    #
# ##   #
#      #
H      X>
#########
""",
"""
######
## k ##
## #  #  
## ## ###
#       #
#       #
#     _ ##
#       #
H       X>
##########
""",
"""
##########
#       # 
H k_    X>
###   ####
###   ####
###   ####
##########
""",
### TODO optimized away the start point - does not help much
"""
################
#             ##
#             ##
#      #      ##
#H k _ # _    X>
####       #####
####       #####
################
""",
"""
#########
###   ###
#     ###
# k   XXX>
###   ####
#     ####
# k   ####
###   ####
#     ####
# k   ####
###   ####
H     ####
##########
"""
]

# solve in number of nodes
# no pruning        16233, 12375, 235676, 146127
# check unmovable:  8460, 7548, 215993, 38800, ?, 12242, ?
# unmovable-border: 7214, 6045, 187574, 26468, 4225382, 7863, ?
# free-spaces:      6374, 4939, 185424, 17360, 3342933, 6471, ?
# prio queue        3214, 7703, 78750, 19572, 3120544, 18008, ?, 21882
# more unsolvable   3262, 656, 35102, 9587, 434584, 3933, ?, 33310

def main():
    arg = sys.argv[1]
    # TODO support submitting level as non-numeric arg
    level = levels[int(arg)]

    if len(sys.argv) > 2 and sys.argv[2] == "play":
        state = Level(level).create_state()
        play(state)
    else:
        solve(level)


def solve(level):
    state = Level(level).create_state()

    # Step 1 - solve with simplified rules, to calculate unsolvable states
    # TODO pre solve

    # Step 2 - actually solve the level
    node_count = 0
    seen = set()
    q = MyPrioQueue()
    q.put(state.prio(), state)

    while not q.empty():
        state = q.get()
        node_count += 1
        if state.on_goal():
            print("Found solution in", node_count, "nodes")
            print(state.show(False), state.path_string())
            return True
        for next_state in state.next_states():
            state_key = next_state.show(False)
            if state_key not in seen:
                seen.add(state_key)
                q.put(next_state.prio(), next_state)
        if node_count % 1000 == 0:
            print(node_count, state, sep="\n")
        if node_count > 100_000_000:
            print("timeout")
            break

    print("Failed to find solution in", node_count, "nodes")
    return False


# simplified priority queue, since the cardinality of distances is small an array is more opt
class MyPrioQueue:
    def __init__(self) -> None:
        self.queues = defaultdict(lambda: queue.Queue())
        self.curr_dist = None
        self.count = 0

    def put(self, prio, value):
        self.queues[prio].put(value)
        if self.curr_dist is None or prio < self.curr_dist:
            self.curr_dist = prio
        self.count += 1

    def get(self):
        if self.count == 0:
            return None

        while self.queues[self.curr_dist].empty():
            self.curr_dist += 1

        self.count -= 1
        return self.queues[self.curr_dist].get()

    def empty(self):
        return self.count == 0


def play(state):
    hist = [state]
    while True:
        print(state.show(False))
        key = input("Move: ")
        move = {"a": LEFT, "w": UP, "d": RIGHT, "s": DOWN, 'u': "UNDO"}.get(key)

        if move == "UNDO":
            if hist:
                hist.pop()
                state = hist[-1]
        elif move:
            state = state.copy()
            success = state.move(state.player, move)
            if success:
                hist.append(state)
            if state.on_goal():
                print("You win!")
                break
            if state.unsolvable():
                print("WARNING! - Unsolvable")


class Level:
    def __init__(self, level):
        rows = level.split("\n")

        self.height = len(rows)
        self.width = max(len(row) for row in rows)
        self.level_data = [["#" for x in range(self.width)] for y in range(self.height)]
        self.keys = []
        self.locks = []
        self.goal = None

        self.lowest_lock = 0

        for y, row in enumerate(rows):
            for x, c in enumerate(row):
                p = (y, x)
                if c == "H":
                    self.player_start = p
                    self.level_data[y][x] = " "
                elif c == "k":
                    self.keys.append(p)
                    self.level_data[y][x] = " "
                elif c == "=":
                    self.keys.append(p)
                    self.level_data[y][x] = "_"
                elif c == "X":
                    self.locks.append(p)
                    self.level_data[y][x] = " "
                    self.lowest_lock = max(self.lowest_lock, y)
                elif c == ">":
                    self.goal = p
                    self.level_data[y][x] = c
                else:
                    self.level_data[y][x] = c

    def level_value(self, pos):
        y, x = pos
        if y < 0 or y >= self.height or x < 0 or x >= self.width:
            return "#"
        return self.level_data[y][x]

    def create_state(self):
        return GameState(self, dict(), self.player_start, self.keys, self.locks, [])


UP, DOWN, LEFT, RIGHT = (-1, 0), (1, 0), (0, -1), (0, 1)


class GameState:
    def __init__(self, level, cruft, player, keys, locks, path):
        self.level = level
        self.cruft = cruft or dict()
        self.player = player
        self.keys = keys
        self.locks = locks
        self.path = path

    # TODO might be opt to copy on change instead of on every new state
    def copy(self):
        return GameState(
            self.level,
            self.cruft.copy(),
            self.player,
            self.keys.copy(),
            self.locks.copy(),
            self.path.copy()
        )

    def move(self, pos, direction, key_push=False):
        next_pos = self.plus(pos, direction)
        lv = self.level.level_value(pos)
        success = False

        if lv == "#":
            success = False
        elif pos in self.locks:
            if key_push:
                self.locks.remove(pos)
                prev_pos = self.minus(pos, direction)
                self.keys.remove(prev_pos)
                success = True
        elif pos in self.keys:
            success = self.move(next_pos, direction, key_push=True)
            if success:
                # check if key was removed by lock
                if pos in self.keys:
                    self.keys.remove(pos)
                    self.keys.append(next_pos)
        elif self.cruft.get(pos):
            success = self.move(next_pos, direction)
            if success:
                del self.cruft[pos]
                self.cruft[next_pos] = True
        elif pos == self.player:
            success = self.move(next_pos, direction)
            if success:
                self.player = next_pos
                if direction == UP:
                    self.cruft[pos] = True
                else:
                    self.fall(self.plus(pos, UP))
        else:
            success = True

        if success and direction != UP:
            self.fall(next_pos)

        return success

    def fall(self, pos):
        fall = False
        f = self.floor(pos)
        if f != pos:
            fall = True
            if pos == self.player:
                self.player = f
            elif pos in self.keys:
                self.keys.remove(pos)
                self.keys.append(f)
            elif self.cruft.get(pos):
                del self.cruft[pos]
                self.cruft[f] = True
            else:
                fall = False
        if fall:
            self.fall(self.plus(pos, UP))

    def floor(self, pos):
        below = self.plus(pos, DOWN)
        lv = self.level.level_value(pos)
        lb = self.level.level_value(below)
        if (
            lv == "_"
            or lb == "#"
            or below == self.player
            or below in self.keys
            or self.cruft.get(below)
        ):
            return pos
        else:
            return self.floor(below)

    def plus(self, pos, direction):
        return pos[0] + direction[0], pos[1] + direction[1]

    def minus(self, pos, direction):
        return pos[0] - direction[0], pos[1] - direction[1]

    def dist(self, pos1, pos2):
        return abs(pos1[0] - pos2[0]) + abs(pos1[1] - pos2[1])

    def next_states(self):
        ret = []
        for dir_name, direction in [("l", LEFT), ("u", UP), ("r", RIGHT)]:
            new_state = self.copy()
            success = new_state.move(self.player, direction)
            if success and not new_state.unsolvable():
                new_state.path.append(dir_name)
                ret.append(new_state)
        return ret

    def on_goal(self):
        return self.level.goal == self.player

    def prio(self):
        key_dist = 0
        player_dist = self.dist(self.player, self.level.goal)
        for key in self.keys:
            key_dist += self.dist(key, self.level.goal)
            player_dist += self.dist(key, self.player)
        return key_dist * 10 + player_dist + len(self.path)

    def calc_unclearable(self):
        unclearable = dict()
        lowest_level = self.level.height

        # TODO better detection
        # 1. scan each horizontal segment of cruft (including key)
        # 2. if blocked on either side -> all unclearable
        # 3. check which sides player can reach (without going through the segment - other segments are fine)

        # mark all walls, border and lock (unless key is nearby) as unclearable
        for y in range(-1, self.level.height+1):
            for x in range(-1, self.level.width+1):
                p = (y, x)
                left = self.plus(p, LEFT)
                if self.level.level_value(p) == "#":
                    unclearable[p] = True
                if p in self.locks and left not in self.locks:
                    key_close = False
                    for key in self.keys:
                        if self.dist(key, p) <= 1:
                            key_close = True
                    if not key_close:
                        unclearable[p] = True

        # track the number of spaces a box can be moved into - a box can essentially not be moved up since another box takes its place
        # TODO currently a naive check, does not check actual reachability
        free_spaces = 0

        for y in range(self.level.height - 1, -1, -1):
            found_lock = False
            free_spaces_on_level = 0

            # propagate unclearable from left to right
            for x in range(self.level.width):
                p = (y, x)
                down = self.plus(p, DOWN)
                left = self.plus(p, LEFT)
                if unclearable.get(down) and unclearable.get(left):
                    if self.cruft.get(p) or p in self.keys:
                        unclearable[p] = True

                if p in self.locks:
                    found_lock = True

                if not unclearable.get(p) and not self.cruft.get(p) and p not in self.keys and not found_lock:
                    free_spaces += 1
                    free_spaces_on_level += 1

            # propagate unclearable from right to left
            for x in range(self.level.width - 1, -1, -1):
                p = (y, x)
                down = self.plus(p, DOWN)
                right = self.plus(p, RIGHT)
                if unclearable.get(down) and unclearable.get(right):
                    if self.cruft.get(p) or p in self.keys:
                        unclearable[p] = True

            # if y > self.level.lowest_lock and y > self.player and free_spaces_on_level == 0:
            if y > self.player[0] and free_spaces_on_level == 0:
                lowest_level = y-1
                for x in range(self.level.width):
                    unclearable[(y, x)] = True

            # mark as unclearable if these is no space to move the boxes falling down
            for x in range(self.level.width):
                p = (y, x)
                if p == self.player:
                    continue

                up = self.plus(p, UP)
                stacked_on_top = 0
                while self.cruft.get(up) or up in self.keys:
                    stacked_on_top += 1
                    up = self.plus(up, UP)

                if stacked_on_top >= free_spaces:
                    unclearable[p] = True

        return unclearable, lowest_level

    def unsolvable(self):
        unclearable, lowest_level = self.calc_unclearable()

        # TODO navie assume goal opens from the left - true for all levels currently

        for key in self.keys:
            # if a key becomes unmovable, the level is unsolvable
            down = self.plus(key, DOWN)
            left = self.plus(key, LEFT)
            right = self.plus(key, RIGHT)
            if unclearable.get(down) and (unclearable.get(left) or unclearable.get(right)):
                return True

            y, x = key

            # key has fallen down and is unretrievable
            if y > lowest_level:
                return True

            if y == lowest_level:
                # if a key is on the lowest level and the lock is above, there is no way to raise the key
                if y < self.level.lowest_lock:
                    return True
                else:
                    # if cruft is ahead of the key, it cannot be removed
                    if (y, x-1) in self.cruft:
                        return True

                    # if cruft is blocking the key from the goal, the level is unsolvable
                    for x2 in range(x, self.level.width):
                        if (y, x2) in self.cruft:
                            return True

                
        # don't push boxes next to the lock - this applies even after the lock has been removed (looking at level)
        for lock in self.level.locks:
            left = self.plus(lock, LEFT)
            if left in self.cruft:
                return True

        # need two squares to be able to push in key - so unclearable is not ok
        for lock in self.locks:
            left = self.plus(lock, LEFT)
            left2 = self.plus(left, LEFT)
            if left2 in self.cruft and unclearable.get(left2):
                return True
            if left in self.keys and left2 in self.cruft:
                # TODO not universally aplicable - could work on some levels
                return True

        # TODO pathfind to goal ?
        # TODO mark all unreachable squares as crufty

        return False

    def path_string(self):
        ret = []
        i = 0

        while i < len(self.path):
            direction = self.path[i]
            repeat = 1

            while i+1 < len(self.path) and self.path[i+1] == direction:
                i += 1
                repeat += 1
            if repeat > 1:
                direction += str(repeat)
            ret.append(direction)

            i += 1
        
        return " ".join(ret)

    def __repr__(self) -> str:
        return self.show()

    def show(self, with_unclearable=True) -> str:
        ret = ""
        if with_unclearable:
            unclearable, lowest_level = self.calc_unclearable()
        else:
            unclearable, lowest_level = dict(), 0

        for y in range(self.level.height):
            for x in range(self.level.width):
                p = (y, x)
                if p == self.player:
                    ret += "H"
                elif p in self.keys:
                    ret += "k"
                elif p in self.locks:
                    ret += "X"
                elif unclearable.get(p):
                    ret += "#"
                elif self.cruft.get(p):
                    ret += "*"
                elif with_unclearable and y == lowest_level:
                    ret += "-"
                else:
                    ret += self.level.level_value((y, x))
            ret += "\n"
        return ret


# Inline tests
# Run by setting UNITTEST=1
class Tests(unittest.TestCase):
        # solve the levels that are fast
    def test_solves1(self):
        self.assertEqual(solve(levels[1]), True)

    def test_solves2(self):
        self.assertEqual(solve(levels[2]), True)

    def test_solves4(self):
        self.assertEqual(solve(levels[4]), True)

    def test_solves6(self):
        self.assertEqual(solve(levels[6]), True)


if __name__ == "__main__":
    if os.environ.get("UNITTEST") == "1":
        unittest.main()
    else:
        main()
