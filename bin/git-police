#!/usr/bin/python

# It's the sound of da police!

import subprocess
import sys

from datetime import datetime
from datetime import timedelta
import argparse

def parse_args():
    parser = argparse.ArgumentParser(description='Walks a git graph and lists all commits that seems to not have been merged with a pull request')
    parser.add_argument('-d', '--days', dest='days', default=14, metavar='days', type=int,
            help='number of days in the history to go back (default 14)')
    parser.add_argument('-f', '--from', dest='from_date',
            help='start from a specific date YYYY-MM-DD')
    parser.add_argument('-t', '--to', dest='to_date',
            help='end at a specific date YYYY-MM-DD')
    parser.add_argument('-a', '--all', dest='all', action='store_true',
            help='scan full project history (ignore days)')
    parser.add_argument('-g', '--good', dest='select_good', action='store_true',
            help='list good commits instead of bad ones')

    args = parser.parse_args()
    if (args.from_date):
        args.start_date = parse_date(args.from_date)
    else:
        args.start_date = (datetime.now() - timedelta(days=args.days)).date().isoformat()

    if (args.to_date):
        args.end_date = parse_date(args.to_date)
    else:
        args.end_date = None

    if (args.all):
        args.start_date = "1970-01-01"
        args.end_date = None

    return args

def parse_date(str):
    return datetime.strptime(str, "%Y-%m-%d").date().isoformat()

def run(command):
    if isinstance(command, str):
        command = command.split(" ")
    return subprocess.check_output(command)

args = parse_args()

SPLIT="$S$"

def main():
    commits = run(["git", "log", "--pretty=%ci %an %s "+SPLIT+"%H"+SPLIT+"%P"]).split("\n")
    if len(commits) < 2:
        print "No commits found"
        sys.exit(0)
    commit_index = index(commits)
    head_sha = parse(commits[0])['sha']
    criminal_commits = start_commit_dfs(head_sha, commit_index)
    print_commits(criminal_commits)

def parse(line):
    parts = line.split(SPLIT)
    msg = parts[0]
    sha = parts[1]
    parents = parts[2].split(" ")
    return {'sha': sha, 'msg':msg, 'parents': parents}

def index(commits):
    ret = dict()
    for line in commits:
        if not line:
            continue
        commit = parse(line)
        ret[commit['sha']] = commit
    return ret

def start_commit_dfs(sha, index):
    selected = []
    commit_dfs(sha, index, {}, selected, False)
    return selected

def commit_dfs(sha, index, visited, selected, is_good):
    if not sha or visited.get(sha):
        return
    visited[sha] = True

    commit = index[sha]
    if is_pr(commit):
        # when a pull request is issued the branch that is merged in is always the second parent
        # thus if we follow the first parent, we are still on the original branch
        parents = commit['parents']
        commit_dfs(parents[0], index, visited, selected, is_good)
        if parents[1]:
            commit_dfs(parents[1], index, visited, selected, True)
    else:
        if in_time_interval(commit) and is_good == args.select_good:
            selected.append(commit)
        for parent_sha in commit['parents']:
            commit_dfs(parent_sha, index, visited, selected, is_good)

def in_time_interval(commit):
    commit_date = commit['msg'][0:10]
    return args.start_date <= commit_date and \
            (args.end_date is None or commit_date <= args.end_date)

def is_pr(commit):
    return "Merge pull request" in commit['msg']

def print_commits(selected_commits):
    sorted_commits = sorted(selected_commits, key=lambda cm: cm['msg'], reverse=True)
    for commit in sorted_commits:
        print commit['msg']

main()
