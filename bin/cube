#!/usr/bin/env python3

import argparse
import math
import os
import sys
import unittest
import random


def main():
    # https://docs.python.org/3/library/argparse.html
    global_parser = argparse.ArgumentParser(description='Rubiks cube solver and helper')

    global_parser.set_defaults(handler=lambda *args, **kwargs: global_parser.print_help())
    global_parser.add_argument('--proper', '-p', action='store_true', help='Use proper notation')
    sub_ps = global_parser.add_subparsers()

    sp = sub_ps.add_parser('scramble', help='solve from scramble')
    sp.set_defaults(handler=cmd_scramble)
    sp.add_argument('move_seq', help='A sequence of moves in the notation fruRUF')

    sp = sub_ps.add_parser('bench', help='benchmark with 30 solves')
    sp.set_defaults(handler=cmd_bench)

    # TODO declare a cube position - option to only declare corners (empty is solved)
    # TODO handle or autodetect proper notation

    parsed_args = global_parser.parse_args()
    # Note: All handlers must have **kwargs to handle global args
    parsed_args.handler(**parsed_args.__dict__)

    # main2()


def cmd_scramble(move_seq: str, **global_args):
    cube = solved_cube
    move_seq = _parse_seq(move_seq, **global_args)
    for move in move_seq:
        cube = do_move(cube, move)
        # TODO add verbose option for each step
        # print(move)
        # print_cube(cube)

    print("Scrambled state")
    print_cube(cube)

    cube_solved, steps = cfop_solve(cube, print_steps=True)
    print("Positions searched", diagnostics['search_steps'])
    if cube_solved:
        print(f"Solved in {len(steps)} moves: {show_steps(steps)}")
        print_cube(cube_solved)
    else:
        print("Did not find solution")
        sys.exit(1)


def cmd_bench(**global_args):
    random.seed(43)
    for i in range(30):
        scramble_moves = "".join([random.choice(moves) for _ in range(30)])
        print("Solution attempt", i+1, scramble_moves)
        cmd_scramble(scramble_moves)


# Convert "proper" notation to our internal one
def _parse_seq(move_seq, **global_args):
    move_seq = move_seq.strip().replace(" ", "")
    if global_args.get('proper') or "'" in move_seq or "2" in move_seq:
        ret = ""
        for i, c in enumerate(move_seq.lower()):
            if c == "2":
                ret += ret[-1]
            elif c == "'":
                ret = ret[:-1] + ret[-1].upper()
            else:
                ret += c
        return ret
    else:
        return move_seq


# Representing the cube:
# Yellow is up, blue is forward
# Each piece is a string, with top/bottom and then clockwise like "yrb", or left-to-right "br"
# Also track the clockwise rotation for each piece. 3 states for corners, 2 for edges
cube_pieces = [
    # top and bottom corners - clockwise from top left
    "yog", "ygr", "yrb", "ybo",
    "wgo", "wrg", "wbr", "wob",
    # top, middle and bottom edges - clockwise from top left
    "yg", "yr", "yb", "yo",
    "go", "rg", "br", "ob",
    "wg", "wr", "wb", "wo",
]
# To store state efficiently we store the index in the list, the upper two bits store parity
solved_cube = bytearray(range(len(cube_pieces)))
PARITY_BASE = 1 << 6
WILDCARD = len(cube_pieces) + 1
# We use uppercase R for r prime (r') - may clash with regular notation
moves = "rludfbRLUDFB"
# Moves are a cycle of changing corner pieces, and another for edge pieces, with parity changes
rotations = [
    bytearray([1, 5, 6, 2, 2, 1, 2, 1]) + bytearray([9, 13, 17, 14, 1, 1, 0, 0]),
    bytearray([0, 3, 7, 4, 1, 2, 1, 2]) + bytearray([11, 15, 19, 12, 1, 1, 0, 0]),
    bytearray([0, 1, 2, 3, 0, 0, 0, 0]) + bytearray([8, 9, 10, 11, 0, 0, 0, 0]),
    bytearray([4, 5, 6, 7, 0, 0, 0, 0]) + bytearray([16, 17, 18, 19, 0, 0, 0, 0]),
    bytearray([3, 2, 6, 7, 1, 2, 1, 2]) + bytearray([10, 14, 18, 15, 1, 1, 0, 0]),
    bytearray([0, 4, 5, 1, 2, 1, 2, 1]) + bytearray([8, 12, 16, 13, 1, 1, 0, 0])
    # prime moves added later
]


def create_prime_moves():
    def transform(regular_move):
        i1, i2, i3, i4, p1, p2, p3, p4 = regular_move
        mod = (3 if i1 < 8 else 2)
        return bytearray([i1, i4, i3, i2, mod-p4, mod-p3, mod-p2, mod-p1])

    half = int(len(rotations[0]) / 2)
    prime_moves = [transform(rot[0:half]) + transform(rot[half:])
                   for rot in rotations]
    return prime_moves


rotations.extend(create_prime_moves())


def find_move(char):
    return rotations[moves.index(char)]


def do_move(cube, char):
    return rotation(cube, find_move(char))


def do_moves(cube, move_str):
    for char in move_str:
        cube = do_move(cube, char)
    return cube


# Movement primitive: Rotates four pieces along a cycle, also updates their parity/rotation
def rotation(cube, barr):
    cube = cube.copy()

    s = cube
    # Unrolled both move steps to make it faster
    # First is corner movement, parity mod 3
    i1, i2, i3, i4, p1, p2, p3, p4 = barr[0:8]
    mod = 3 * PARITY_BASE

    tmp = s[i4]
    # TODO inline PARITY_BASE into the move array ??
    s[i4] = (s[i3] + p3 * PARITY_BASE) % mod
    s[i3] = (s[i2] + p2 * PARITY_BASE) % mod
    s[i2] = (s[i1] + p1 * PARITY_BASE) % mod
    s[i1] = (tmp + p4 * PARITY_BASE) % mod

    # Second is edge movement, parity mod 2
    i1, i2, i3, i4, p1, p2, p3, p4 = barr[8:]
    mod = 2 * PARITY_BASE

    tmp = s[i4]
    s[i4] = (s[i3] + p3 * PARITY_BASE) % mod
    s[i3] = (s[i2] + p2 * PARITY_BASE) % mod
    s[i2] = (s[i1] + p1 * PARITY_BASE) % mod
    s[i1] = (tmp + p4 * PARITY_BASE) % mod

    return cube


def cfop_solve(cube, print_steps=False):
    # 0 - ignore piece, 1 - just care about parity, 2 - piece in right place
    target_lookup = [0] * len(cube)

    solution_order = [
        # first the cross
        (2, [16, 17, 18, 19]),
        # F2L one corner at a time
        (2, [14, 6]),
        (2, [13, 5]),
        (2, [12, 4]),
        (2, [15, 7]),
        # oll - yellow cross - only care about parity (1)
        (1, [8, 9, 10, 11]),
        # oll - yellow corners - only care about parity (1)
        (1, [0, 1, 2, 3]),
        # pll - yellow corners fully solved, start with back piece
        (2, [0, 1]),
        (2, [2, 3]),
        # pll - edges solved, start with back piece
        (2, [8]),
        (2, [9, 10, 11]),
    ]
    # one_at_a_time = [[piece] for targets in solution_order for piece in targets]
    full_steps = []

    for (target_mode, new_targets) in solution_order:
        for piece in new_targets:
            target_lookup[piece] = target_mode
        cube, steps = bidirectional_search(cube, target_lookup=target_lookup, max_steps=7)
        if not cube:
            return cube, ""
        full_steps.extend(steps)
        if print_steps and steps and cube != solved_cube:
            print("Positions searched", diagnostics['search_steps'])
            print("Partial solution:", show_steps(full_steps))
            print_cube(cube)

    return cube, full_steps


def key_for_target(cube, target_lookup):
    if target_lookup:
        key = []
        for c in cube:
            t = target_lookup[c % PARITY_BASE]
            if t == 0:
                key.append(WILDCARD)
            if t == 1:
                key.append(WILDCARD + math.floor(c / PARITY_BASE))
            if t == 2:
                key.append(c)
        return bytes(key)
    else:
        return bytes(cube)


# TODO add a A* flavor to this - any move can solve at most 8 pieces
def bidirectional_search(start_cube, target_cube=solved_cube, target_lookup=None, max_steps=9000):
    key_start = key_for_target(start_cube, target_lookup)
    key_target = key_for_target(target_cube, target_lookup)

    if key_start == key_target:
        return start_cube, []

    forward = [(start_cube, [])]
    backward = [(target_cube, [])]
    seen_f = {key_start: []}
    seen_b = {key_target: []}

    solution = None

    for step in range(max_steps):
        solution_f, forward = expand_direction(forward, seen_f, seen_b, target_lookup)
        if solution_f:
            solution = solution_f[0] + reverse_steps(solution_f[1])
            break

        solution_b, backward = expand_direction(backward, seen_b, seen_f, target_lookup)
        if solution_b:
            solution = solution_b[1] + reverse_steps(solution_b[0])
            break

    if solution:
        cube = start_cube
        for move_index in solution:
            cube = rotation(cube, rotations[move_index])
        return cube, solution

    return None, None


def expand_direction(q, seen, other_seen, target_lookup):
    next_q = []

    for (prev_cube, prev_steps) in q:
        for index, rot in enumerate(rotations):
            cube = rotation(prev_cube, rot)
            steps = prev_steps + [index]

            key = key_for_target(cube, target_lookup)
            if key in seen:
                continue
            seen[key] = steps

            other_steps = other_seen.get(key)
            if other_steps is not None:
                return (steps, other_steps), []

            diagnostics['search_steps'] += 1
            next_q.append((cube, steps))

    return None, next_q


def reverse_steps(steps):
    l = len(rotations)
    return [(idx + int(l/2)) % l for idx in reversed(steps)]


def show_steps(steps):
    return " ".join([moves[i] for i in steps])


def print_cube(cube):
    print(show_cube(cube))
    print()


def show_cube(cube):
    # cube = handle(cube)
    def p(index, side):
        return _show_side(get_piece(cube, index), get_parity(cube, index), side)
    pc = _show_color
    # start of edges index
    e = 8

    t1 = p(0, 0) + p(e+0, 0) + p(1, 0)
    t2 = p(e+3, 0) + pc("y") + p(e+1, 0)
    t3 = p(3, 0) + p(e+2, 0) + p(2, 0)

    l1 = p(0, 1) + p(e+3, 1) + p(3, 2)
    l2 = p(e+4, 1) + pc("o") + p(e+7, 0)
    l3 = p(4, 2) + p(e+11, 1) + p(7, 1)

    f1 = p(3, 1) + p(e+2, 1) + p(2, 2)
    f2 = p(e+7, 1) + pc("b") + p(e+6, 0)
    f3 = p(7, 2) + p(e+10, 1) + p(6, 1)

    d1 = p(7, 0) + p(e+10, 0) + p(6, 0)
    d2 = p(e+11, 0) + pc("w") + p(e+9, 0)
    d3 = p(4, 0) + p(e+8, 0) + p(5, 0)

    r1 = p(2, 1) + p(e+1, 1) + p(1, 2)
    r2 = p(e+5, 0) + pc("r") + p(e+6, 1)
    r3 = p(6, 2) + p(e+9, 1) + p(5, 1)

    b1 = p(1, 1) + p(e, 1) + p(0, 2)
    b2 = p(e+5, 1) + pc("g") + p(e+4, 0)
    b3 = p(5, 2) + p(e+8, 1) + p(4, 1)

    i = "  " * 3
    return "\n".join([
        i+t1, i+t2, i+t3,
        l1 + f1 + r1 + b1, l2 + f2 + r2 + b2, l3 + f3 + r3 + b3,
        i+d1, i+d2, i+d3
    ])


def get_piece(cube, index):
    return cube_pieces[cube[index] % PARITY_BASE]


def get_parity(cube, index):
    return math.floor(cube[index] / PARITY_BASE)


def _show_side(piece, parity, side_index):
    color = shift(piece, parity)[side_index]
    return _show_color(color)


COLORS = {
    "w": "\033[1;0m",
    "y": "\033[1;33m",
    "b": "\033[1;34m",
    "r": "\033[0;31m",
    "g": "\033[1;32m",
    # https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit
    "o": '\033[38;5;166m'
}
RESET_COLOR = "\033[0;0m"


def _show_color(color):
    return COLORS[color] + "##" + RESET_COLOR


def shift(s, shift_len):
    shift_len = shift_len % len(s)
    return s[len(s)-shift_len:] + s[0:len(s)-shift_len]


# Inline tests
# Run by setting UNITTEST=1
class Tests(unittest.TestCase):
    def test_one_rotation(self):
        c = solved_cube
        c = do_moves(c, "r")
        self.assertEqual('yrb', get_piece(c, 1))
        self.assertEqual(1, get_parity(c, 1))
        self.assertEqual('br', get_piece(c, 9))
        self.assertEqual(0, get_parity(c, 9))

    def test_rotates_back(self):
        for move in moves:
            self._assert_identity(lambda cube: do_move(cube, move), 4)

    def test_algo_identity(self):
        # fru, oll, pll corners, pll edges
        self._assert_identity(lambda cube: do_moves(cube, "fruRUF"), 6)
        self._assert_identity(lambda cube: do_moves(cube, "ruRuruuR"), 6)
        self._assert_identity(lambda cube: do_moves(cube, "RuRddrURddrr"), 3)
        self._assert_identity(lambda cube: do_moves(cube, "rUrururURUrr"), 3)

    def test_solver(self):
        # testing to solve a medium complicated scramble - to keep test fast
        c = solved_cube
        c = do_moves(c, "frud")
        self.assertNotEqual(solved_cube, c)
        c, steps = cfop_solve(c)
        self.assertEqual(solved_cube, c)
        self.assertEqual("D R F f U F f u r U R F", show_steps(steps))

    def _assert_identity(self, fn, iterations):
        c = solved_cube
        states = show_cube(c)
        for i in range(iterations):
            c = fn(c)
            states += f"\nStep {i+1}:\n" + show_cube(c)
            if i+1 < iterations:
                self.assertNotEqual(solved_cube, c,
                                    f"cube solved faster than in {iterations} steps:\n" + states)
        self.assertEqual(solved_cube, c, "expected solved but found seq:\n" + states)


diagnostics = dict(search_steps=0)

if __name__ == '__main__':
    if os.environ.get("UNITTEST") == "1":
        unittest.main()
    else:
        main()


# old notes about performance:

# perf - 1M rotations (a full solve (first iteration) seems to create 30M states)
# baseline: 3.5 seconds
# separated lists: 2.9s
# abstraction layer: 5.677
# abstraction layer with fewer fn calls: 3.7 - interesting, prime operations are a lot slower
# changing the benchmark to use prime moves 4.4
# using a list with indices 4.2 - just a small improvement, within error margin
# using byte arrays 4.2
# sending the move as byte arrays 3.6
# hardcoded method 2.9
# simplifying again, removing the methods 3.3
# inlining the parity bit 2.5 - wohoo - something improves !!!
# tmp variable 2.4
# unrolled both moves 2.3
# removed abstractions 1.7

# solves:
# benchmark:
# "U  D2  F  B'  D2  R2  U  B  R2  U2  F  U'  D  B'  D2  L2  U'  F  B'  R  U2  D'  L  D2  L'"
# 1. first iteration: 1:58
# 2. removing b/B moves (just for fun): 41s
# 3. checking goal before list push: 25s (down to 2.5M search states)

# bench 30 - seed 42
# 3. 7:42
