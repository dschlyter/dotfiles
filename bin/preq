#!/usr/bin/python

import subprocess
import sys
import argparse
import os
import re

# pip install requests
import requests
from requests.auth import HTTPBasicAuth

description='Connects to the bitbucket API and lists your pull request. Opens browser and checks out code for you to view'

def parse_args():
    parser = argparse.ArgumentParser(description=description)
    return parser.parse_args()

def main():
    args = parse_args()
    env = parse_env()

    pull_requests = fetch_pr(env.bb_endpoint, env.bb_user, env.bb_pass)
    # print pull_requests['values']
    prs = pull_requests.get('values')
    print "found", len(prs), "pull requests"
    for pr in prs:
        check_review(pr, env.code_dir)

# to run this script, all these vars need to be defined
def parse_env():
    code_dir = require_env("CODE_DIR")
    bb_endpoint = require_env("BITBUCKET_ENDPOINT")
    bb_user = require_env("BITBUCKET_USER")
    system_user = require_env("USER")
    # set password with security add-generic-password -a $USER -s bitbucket -w <PASS>
    bb_pass = run("security find-generic-password -a "+system_user+" -s bitbucket -w")
    return Namespace(code_dir=code_dir, bb_endpoint = bb_endpoint, bb_user=bb_user, bb_pass=bb_pass)


def fetch_pr(endpoint, user, passw):
    full_ep = endpoint + "/rest/api/1.0/inbox/pull-requests?role=reviewer&start=0&limit=10&avatarSize=64&withAttributes=true&state=OPEN&order=oldest"
    # full_ep = "http://localhost:1234"
    headers = {'accept': 'application/json'}
    resp = requests.get(full_ep, headers=headers, auth=HTTPBasicAuth(user, passw))
    return resp.json()

def check_review(pull_request, code_dir):
    print pull_request['toRef']['repository']['name'], pull_request['author']['user']['displayName'], pull_request['title']
    ans = raw_input("review? (y/N)")
    if ans == 'y':
        do_review(pull_request, code_dir)

def do_review(pull_request, code_dir):
    url = pull_request['links']['self'][0]['href']
    run(['open', url])

    os.chdir(code_dir)
    ssh_url = pull_request['toRef']['repository']['links']['clone'][0]['href'].encode('ascii', 'ignore')
    lookup_cmd = 'find . -name ".git" -execdir sh -c \'echo $(pwd) $(git remote -v)\' ";" | grep \''+ssh_url+'\' | awk \'{print $1}\''
    repo_dir = run(lookup_cmd)
    if repo_dir:
        os.chdir(repo_dir)
        # branch= ".values[$INDEX].fromRef.displayId")"
        branch= pull_request['fromRef']['displayId'].encode('ascii','ignore')
        print branch
        run("git fetch")
        run("git checkout "+branch)
        run("git pull")
        run("git branch -f master origin/master")
        run("open -a 'IntelliJ IDEA'")
    else:
        print "Could not find repo dir in", code_dir, "perhaps you need to clone it?"

def require_env(key):
    value = os.environ.get(key)
    if not value:
        raise Exception("required env var "+key+" not found")
    return value

class Namespace:
    def __init__(self, **kwargs):
        self.__dict__.update(kwargs)

def run(command, shell=False, canFail=False, output=False):
    try:
        if isinstance(command, str):
            if re.search("['\"|]", command):
                shell = True
            if shell:
                command = ["bash", "-c", command]
            else:
                command = command.split(" ")
        stdout = subprocess.check_output(command)
        if output:
            print stdout
        return stdout.strip()
    except Exception as e:
        if canFail:
            return None
        else:
            raise

main()
