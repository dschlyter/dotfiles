#!/usr/bin/env python3

import sys
import os
import argparse
import shutil

sys.dont_write_bytecode = True
from dotlib.oldlib import run


description="""Open all filenames in current dir in vim, edit as you like with the full power of vim.
When you save files will be renamed to your changed name."""


def parse_args():
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('-i', '--id', dest='existing_id', help='id of an existing change, to retry on error')
    parser.add_argument('-r', '--recursive', dest='recursive', action='store_true', help='list files recursively')
    parser.add_argument('-d', '--dirs', dest='dirs', action='store_true', help='list only directories')
    return parser.parse_args()


def main():
    args = parse_args()

    id = args.existing_id or os.getpid()
    original_file="/tmp/vimrn-orig-"+str(id)
    rename_file="/tmp/vimrn-rn-"+str(id)

    if not args.existing_id:
        list_files(args, original_file, rename_file)

    rename_files(rename_file)
    success = execute_changes(original_file, rename_file)

    if success:
        clean_up(original_file, rename_file)
    else:
        print("Execute vr -i {0} to try again".format(id), end=' ')


def list_files(args, original_file, rename_file):
    find_args = ""
    if args.dirs:
        find_args = "-type d"
    if args.recursive or args.dirs:
        run("find . {0} -not -path . | sed 's|^\\./||' > {1}".format(find_args, original_file))
    else:
        run("ls -1 > {0}".format(original_file))
    run("cp {0} {1}".format(original_file, rename_file))


def rename_files(rename_file):
    run("vim {0}".format(rename_file), print_stdout=True)


def execute_changes(original_file, rename_file):
    with open(original_file, 'r') as of, open(rename_file, 'r') as rf:
        original = of.read().splitlines()
        renamed = rf.read().splitlines()

        if not valid_changes(original, renamed):
            return False

        renames = []
        for i in range(len(renamed)):
            o = original[i]
            r = renamed[i]
            if o != r:
                renames.append([o, r])

        # TODO create dest directories if they do not exist

        # two phase rename in order to handle name swapping
        for r in renames:
            shutil.move(r[0], r[1]+".vimrntmp")

        for r in renames:
            shutil.move(r[1]+".vimrntmp", r[1])

        return True


def valid_changes(original, renamed):
    if original == renamed:
        print("There are no renames")
        # this is not considered an error
        return True
    elif len(original) != len(renamed):
        print("Number of lines differ, cannot do rename mapping")
    elif len([f for f in renamed if f == ""]) > 0:
        print("There are empty lines, cannot rename to empty name")
    elif len(set(renamed)) != len(renamed):
        print("There are duplicate destination filenames")
    else:
        return True

    return False


def clean_up(original_file, rename_file):
    run("rm {0} {1}".format(original_file, rename_file))


main()
