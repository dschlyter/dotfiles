#!/usr/bin/env python
import math
import sys
import argparse
import dateutil.tz
from collections import defaultdict
from datetime import datetime, timedelta
from typing import List, Dict

try:
    import git
    from git import Repo
except:
    print("dependency missing, fix with: pip install gitpython")
    sys.exit(1)


CHUNKS = 60


class Author:
    def __init__(self):
        self.name = None
        self.commit_count = 0
        self.commit_lines = 0
        self.commit_history = [0] * CHUNKS
        self.first_commit = None
        self.last_commit = None
        # TODO commit correlation


def main():
    parser = argparse.ArgumentParser(description='Print contributor stats for repo')
    parser.add_argument('location', nargs="?", default=".", help='where the repo is')
    parser.add_argument('--days-back', type=int, help='days back to read log')
    args = parser.parse_args()

    history = git_log(args.location)

    if args.days_back:
        now = datetime.now(tz=dateutil.tz.tzoffset(None, 0))
        history = list(filter(lambda commit: now - commit.authored_datetime < timedelta(days=args.days_back), history))

    if history:
        print_author_stats(history)
        print_collaborator_matrix(history)
    else:
        print("No commits")


def print_author_stats(history: List[git.Commit]):
    start = history[0].authored_datetime
    end = history[-1].authored_datetime
    chunk_size = (end - start) / CHUNKS

    print("first commit:", start)
    print("last commit", end)

    author_lookup = defaultdict(lambda: Author())

    for c in history:
        author = author_lookup[c.author]
        author.name = c.author.name
        author.commit_count += 1

        if not author.first_commit:
            author.first_commit = c.authored_datetime
        author.last_commit = c.authored_datetime

        chunk_index = min(math.floor((c.authored_datetime - start) / chunk_size), CHUNKS - 1)
        author.commit_history[chunk_index] += 1

    author_list = sorted(author_lookup.values(), key=lambda x: x.commit_count, reverse=True)

    commit_peak = max(h for a in author_list for h in a.commit_history)
    name_max = max([len(a.name) for a in author_list])

    header = ""
    while len(header) < CHUNKS:
        d = start + (len(header) + 3) * chunk_size
        header += str(d)[2:7] + " "

    print("\t"+header)
    for a in author_list:
        print(a.commit_count, end="\t")
        for h in a.commit_history:
            print(ratio_char(h / commit_peak), end="")
        print(end="\t")
        print(a.name.ljust(name_max), str(a.first_commit)[:10], "-", str(a.last_commit)[:10])


def print_collaborator_matrix(history: List[git.Commit]):
    print("Building collaborator matrix...")
    contributions_per_author = defaultdict(lambda: 0)

    contributions_per_file = defaultdict(lambda: [])
    for commit in history:
        author = commit.author.name
        for file in commit.stats.files.keys():
            contributions_per_file[file].append({'author': author, 'time': commit.authored_datetime})
            contributions_per_author[author] += 1

    # inefficient O(n^2) algo, but this is dwarfed by whatever the loop above is doing, so no need for opt
    collaborations = defaultdict(lambda: 0)
    collaboration_limit = timedelta(weeks=1).total_seconds()
    for file_contributions in contributions_per_file.values():
        for i, contribution in enumerate(file_contributions):

            def near_in_time(other_contribution):
                return abs((contribution['time'] - other_contribution['time']).total_seconds()) < collaboration_limit

            near_contribs = filter(near_in_time, file_contributions)
            collaborators = set(map(lambda x: x['author'], near_contribs))
            for author in collaborators:
                collaborations[(contribution['author'], author)] += 1

    authors_by_file = sorted(contributions_per_author.keys(), key=lambda a: contributions_per_author[a], reverse=True)
    # cap authors to avoid a massive matrix with line breaks
    authors_by_file = authors_by_file[:10]

    # print header
    first_col = 15
    print(" "*first_col, end=" ")
    print("Edits", end="\t")
    for i, author in enumerate(authors_by_file):
        print(author[:6], end="\t")
    print()

    for i, author in enumerate(authors_by_file):
        print(author[:first_col].rjust(first_col), end=" ")
        print(contributions_per_author[author], end="\t")
        for j, other_author in enumerate(authors_by_file):
            colab_ratio = collaborations[(author, other_author)] / contributions_per_author[author]
            print(f"{colab_ratio:.2f}", end="\t")
        print()


def ratio_char(ratio):
    ratio = max(0, min(ratio, 1))
    if ratio == 0:
        return ' '

    chars = ['_', '▁', '▂', '▃', '▄', '▅', '▆', '▇', '█']
    index = round(ratio * (len(chars) - 1))
    return chars[index]


def git_log(location) -> List[git.Commit]:
    r = git.Repo(location)
    h = r.head
    head_commit = h.object
    history = [c for c in head_commit.traverse()]
    history = sorted(history, key=lambda c: c.authored_date)
    return history


if __name__ == '__main__':
    main()
