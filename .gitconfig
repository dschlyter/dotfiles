[color]
    ui = auto
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
    whitespace = red reverse
[color "status"]
    added = yellow
    changed = green
    untracked = cyan
[apply]
    whitespace=fix
[core]
    whitespace=-indent-with-non-tab,trailing-space,cr-at-eol
    excludesfile = ~/.gitignore
    editor = vim
    autocrlf = input
    # for some reason this value is always automatically re-indented with a tab instead of spaces, I give up on reseting it every time
	trustctime = false
[advice]
    statusHints = false
[branch]
    # When branching off a remote branch, automatically let the local branch track the remote branch
    autosetupmerge = true
    # Use rebase when pulling
    autosetuprebase = always
[fetch]
    prune = true
[diff]
    renames = copies
[push]
    default = current
[pull]
	rebase = true
# Enable the recording of resolved conflicts, so that identical hunks can be resolved automatically later on.
[rerere]
    enabled = true
[interactive]
    # remove need to press enter in interactive or add -p modes, requires library readkey to be installed
    # on linux: sudo cpan Term::ReadKey
    singlekey = true
[alias]
    # shorthands with good defaults
    st = status -sb
    di = diff HEAD
    dis = diff --staged
    diw = diff HEAD --color-words='[^[:space:]]|([[:alnum:]]|UTF_8_GUARD)+'
    au = add -u
    cm = commit -v
    cma = !git cm --amend
    f = fetch
    m = merge
    pu = push -u --follow-tags
    pp = !git pull --rebase && git pu
    pufl = push --force-with-lease
    br = branch -vv
    rb = rebase
    rba = rebase --autostash
    sw = switch
    sc = switch -c
    sm = switch master
    smm = switch master --merge
    smc = switch master -c
    cp = cherry-pick
    sa = stash --include-untracked
    ski = stash --keep-index
    np = restore -p

    # entry point for custom scripts (for things that are too large to define inline here)
    # list contibutors with number of commits
    contribs = !$HOME/.git-scripts/entry contribs
    contribs2 = !$HOME/.git-scripts/entry contribs2
    # switch branch and prepare for review
    review = !$HOME/.git-scripts/entry review
    wsreset = !$HOME/.git-scripts/entry wsreset
    update-hooks = !$HOME/.git-scripts/entry update-hooks
    web = !$HOME/.git-scripts/entry web

    # easy merge and split of repos, with preserved history (hash-identical roundtrip when testing)
    filter-repo = !$HOME/.git-scripts/filter-repo
    repo-barf = !$HOME/.git-scripts/entry repo-barf
    repo-slurp = !$HOME/.git-scripts/entry repo-slurp
    rewrite-email = !$HOME/.git-scripts/entry rewrite-email

    # notes:
    # add "#" to the end to prevent alias from consuming input, useful with $1 args
    # " needs escaping, ' does not

    # shorthand to show aliases
    edit = !$EDITOR $HOME/.gitconfig_base
    al = !git config alias.\"$1\" "#"
    alex = !echo "[alias]" && cat $HOME/.gitconfig_base | grep
    alias = !git config alias.\"$1\" "#"
    alc = !cat \"$HOME/.gitconfig_base\" | grep \"^ *$1\" "#"

    # diff with selection
    df = !git status --porcelain | awk '{print $2}' | fzf | xargs git diff "#"
    dg = !git status --porcelain | awk '{print $2}' | grep -i \"$1\" | xargs git diff "#"

    # ignore without .gitignore, but for tracked files
    ignore = update-index --assume-unchanged
    unignore = update-index --no-assume-unchanged
    ignored = !git ls-files -v | grep "^[[:lower:]]"
    # ignore but only locally (will not be pushed)
    exclude = !mkdir -p .git/info && vim .git/info/exclude "#"

    # repo checks (reusable in aliases below)
    is-clean = !test -z \"$(git status --porcelain)\"
    curr-br = branch --show-current
    branch-exists = !git rev-parse $1 > /dev/null 2>&1 "#"
    on = !test \"$(git curr-br 2> /dev/null)\" == \"$1\" "#"
    behind = !git merge-base --is-ancestor HEAD "$1" "#"
    same = !test $(git rev-parse $1) == $(git rev-parse $2) "#"

    # log and display
    # nicely formatted log, default to 15 entries but another -n may override that
    # lgh only shows HEAD and ancestor commits
    # lg shows all branches
    lg = !git lh --all
    lh = log --color --graph --date='format:%Y-%m-%d %H:%M' --pretty=format:'%C(red)%h%C(reset) %C(green)%ad%C(reset): %s%C(reset)%C(yellow)%d%C(reset) - %C(bold blue)%an%C(reset)' --abbrev-commit -n 15
    ln = !git lh --no-merges
    ll = !git lg -n 9999
    lhl = !git lh -n 9999
    lc = !git ll | grep -C 10 $(git rev-parse --short HEAD)
    lS = log --color --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ai) %C(bold blue)<%an>%Creset' --abbrev-commit -S
    # log including all branchless (rebased, amended, dropped) commits
    la = !git ll $(git fsck --unreachable --no-reflog | grep commit | grep -o '[^ ]*$')
    mine = !git ll --since='2 weeks ago' --author='David Schlyter' --author-date-order
    # show the first commit from log that matches sha-prefix, eg. git sc 72F
    sf = !git log | grep '^commit '\"$1\" | head -n 1 | cut -d' ' -f2- | xargs git show "#"

    # commit
    # patched commit with a file review and untracked sanity check first
    pc = !bash -c 'git status && ( [[ ! "$(git ls-files --others --exclude-standard)" ]] || ( echo "!!! - Warning: Untracked files - !!! - press any key to confirm" && read -n 1 )) && [[ "$(git ls-files --modified)" ]] && git cm -p $1' -
    ai = !git status --porcelain | grep -E '^.[^ ]' | fzf -m --tac | colrm 1 3 | xargs git add
    ri = !git status --porcelain | grep -E '^[^ ?]' | fzf -m --tac | colrm 1 3 | xargs git reset
    ni = !git status --porcelain | grep -E '^[^?]' | fzf -m --tac | colrm 1 3 | xargs git restore
    vask-unstaged = !git stash --keep-index && git stash drop
    # stage all unstaged, and unstage all staged (note: partially staged becomes fully staged)
    invert = !UNSTAGED=$(git status --porcelain | grep -E '^.[^ ]' | colrm 1 3) && git reset > /dev/null && git add $UNSTAGED
    add-again = !git status --porcelain | grep -E '^[^ ?][^ ]' | colrm 1 3 | xargs git add
    # wip commit, to be used in combination with post-switch auto pop of all commits named "wip-stash"
    wip = !git add -A";" git wipa
    wipa = !git commit -m 'wip-commit'
    wip-stash = !git add -A";" git wipa-stash
    wipa-stash = !git commit --no-verify -m 'wip-stash'
    ws = wip-stash
    # don't commit but save state to reflog
    checkpoint = !git commit -am \"checkpoint: $*\" && git reset 'HEAD~1' "#"
    nuke = !git checkpoint "nuking repo" && git reset --hard
    # remove all whitespace changes
    rw = !sh -c 'git diff -U0 -w --no-color "$@" | git apply --cached --ignore-whitespace --unidiff-zero - && git restore "${@:-.}" && git reset'

    # amend and rebase
    # amend without changing git commit message
    amend = commit --amend --reuse-message=HEAD
    pa = !git amend -p
    # --amend but to a previous commit below HEAD
    fixup = !(git diff-files --quiet || (echo 'Unstaged changes, please commit or stash with --keep-index' && exit 1)) && COMMIT=$(git rev-parse $1) && git commit --fixup=$COMMIT && git rebase -i --autosquash $COMMIT~1 "#"
    fup = !git fixup \"$(git select)\"
    # automatically fixup the last commit where added files where changed (no stash change since this never conflicts)
    fixup-unsafe = !COMMIT=$(git rev-parse $1) && git commit --fixup=$COMMIT && git rebase -i --autosquash $COMMIT~1 "#"
    fixup-last = !git fixup-unsafe $(git log -n 1 --pretty=format:%H -- $(git diff --cached --name-only))
    select = !git log --pretty --oneline --decorate --color | fzf --ansi | awk '{print ""$""1}'
    cps = !git cherry-pick $(git select)
    amend-date = !GIT_COMMITTER_DATE=\"$1\" git commit --amend --date=\"$1\" "#"
    # continue rebase with sanity check and auto add
    rbc = !ag \"<<<<\" || git add -u && git rebase --continue

    # switch/reset back n commits
    rsn = !COUNT=${1:-1}";" shift";" git reset HEAD~$COUNT \"$@\" "#"
    uncommit = rsn 1
    # soft reset, useful to retract (un-amend) things and then recommit
    rss = ucm --soft
    recommit = commit --reuse-message=HEAD@{1}
    retract = !git reset && git rss && git reset -p && git recommit
    retract-files = !git reset && git rss && git ri && git recommit
    # rebase the last n commits
    rbn = !git rebase -i HEAD~$1 "#"
    rsm = branch -f master origin/master
    # remove no commit content
    nocommit-reset = !git reset $(git dic --name-only -G NOCOMMIT)

    # pulling changes more productively
    # fetch, prune removed remote branches and shortlog fetched changes
    fe = !sh -c 'PRE=${1:-$(git rev-parse origin/master)} && git fetch --tags --prune && git lh $PRE..$(git rev-parse origin/master) || true' -
    # get remote updates even with local uncommited changes (but abort on conflicts)
    ff = !sh -c 'git lazy-fe && git merge --ff-only'
    # fast forward branch without checking them out
    up = !git lazy-fe $1 && git merge-base --is-ancestor $1 origin/$1 && (! git same $1 origin/$1 && git branch -f $1 origin/$1 || true)"#"
    urb = !git up $1 && git rebase --autostash $1 "#"
    mup = !git up master
    mur = !git urb master
    # lazy fetch, for having fetch in commands that may be chained together, without fetching multiple times
    last-fetch = !echo $(( $(date +%s) - $(${GNU_PREFIX}stat -c %Y .git/FETCH_HEAD) )) "#"
    lazy-fe = !test $(git last-fetch) -gt 20 && git fe || true

    # branch management
    # when done with branch after squash (this will do a hard delete of the branch)
    done = !git switch master && git pull --prune && git brc
    # list all branches - but local last
    brl = branch --sort=committerdate --format='%(color:green)%(committerdate:relative)%(color:reset) %(color:red)%(objectname:short)%(color:reset) %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject) - %(authorname) '
    bra = !git --no-pager brl --color --remotes && git --no-pager brl --color
    braf = !git bra --color | fzf --tac --ansi --exact | awk '{print $5}' "#"
    s = !git braf | sed 's,origin/,,' | xargs git sw "#"
    # branch cleanup
    # delete or rename branch, both locally and remotely
    brd = !git branch -d $1";" git push origin --delete $1 "#"
    brm = !old_name=$(git curr-br) && git br -m $1 && git push origin :$old_name $1 && git su "#"
    # branch cleanup
    brc = !git branch --merged | grep -v \\* | grep -v master | grep -v develop | xargs -n 1 git branch -d && git delete-gone
    # delete branches that has upstream deleted
    delete-gone = !git branch -vv | grep ': gone]' | awk '{print $1}' | xargs -n 1 git branch -D
    # quick alias for setting upstream
    su = !git branch -u origin/$(git curr-br)
    # when you forget to create a feature branch and commit on main
    rbr = !branch=\"$(git symbolic-ref --short HEAD)\" && git branch -m \"$1\" && git branch \"$branch\" \"origin/$branch\" "#"
    # move the added files to a new branch from master, save unstaged as a WIP commit. for when you start new work on the wrong branch.
    nbr = !git invert && git wipa-stash && git switch master -c
    tmp = !git switch -C tmp
    # quickly just add everything to a branch
    qb = !git switch -c "$(echo $* | tr ' ' '-')" && git add . && git commit -am \"$*\" "#"
    # or just when you are too lazy to write -am ""
    cam = !git commit -am \"$*\" "#"

    # tag management
    # tag a version, make sure it is an annotated tag, but avoid hassle with duplicating version in commit message
    tv = !git tag -m \"Version $1\" \"$1\" "#"
    tagd = !git tag -d $1";" git push origin --delete $1 "#"

    # github
    github-url = !echo \"$(git config --get remote.origin.url | sed -e 's,:,/,' -e 's,https///,https://,' -e 's,git@,https://,' -e 's/[.]git$//')\"
    github-use-ssh = !git remote set-url origin \"git@github.com:$(git config --get remote.origin.url | sed -e 's,github.com[/],,' -e 's,.*[:][/]*,,')\"
    pr-winner = !git log --oneline --since='1 week' --pretty=format:'%an: %s' | grep 'Merge pull request' | sed 's/:.*//' | sort | uniq -c | sort -nr
    fetch-pr = !git fetch origin "pull/$1/head:pr-$1" "#"

    # multi-repo stuff
    # everything i have done the last month. there is an echo and inverse grep empty lines to make sure newlines are properly inserted
    allmine = "!find . -name .git -exec sh -c \"cd {}; git log --author='David Schlyter' --since='2 month' --date=iso --pretty=format:'%cd {} %s'; echo \" ';' | grep -v '^$' | sort"
    logall = "!find . -name .git -exec sh -c \"cd {}; git log --since='2 month' --date=iso --pretty=format:'%cd %an {} %s'; echo \" ';' | grep -v '^$' | sort"

    cleanout = !git clean -Xdf && git gc
    yolo = !git add -A && git commit -m \"$(curl -s whatthecommit.com/index.txt)\" && git push
[web]
    browser = google-chrome
[include]
    # local override of settings, file relative to .gitconfig. requires git 1.7.10+
    # this breaks in EGit :@
    path = .gitconfig_local
[init]
    templatedir = ~/.git_template
[credential]
    helper = cache --timeout=3600
[merge]
    tool = vimdiff
[mergetool]
    keeptemporaries = false
    keepbackups = false
    prompt = false
    trustexitcode = false
[rebase]
    autoStash = true

