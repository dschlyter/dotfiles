[user]
    name = David Schlyter
    email = dschlyter@gmail.com
[color]
    ui = auto
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
    whitespace = red reverse
[color "status"]
    added = yellow
    changed = green
    untracked = cyan
[apply]
    whitespace=fix
[core]
    whitespace=-indent-with-non-tab,trailing-space,cr-at-eol
    excludesfile = ~/.gitignore
    editor = vim
    trustctime = false
    autocrlf = input
[advice]
    statusHints = false
[branch]
    # When branching off a remote branch, automatically let the local branch track the remote branch
    autosetupmerge = true
    # Use rebase when pulling
    autosetuprebase = always
[diff]
    renames = copies
[push]
    default = current
# Enable the recording of resolved conflicts, so that identical hunks can be resolved automatically later on.
[rerere]
    enabled = true
[interactive]
    # remove need to press enter in interactive or add -p modes, requires library readkey to be installed
    singlekey = true
[alias]
    # shorthands with good defaults
    st = status -sb
    cm = commit -v
    br = branch
    rb = rebase
    co = checkout
    cp = cherry-pick
    fe = fetch --prune

    # nicely formatted log, default to 15 entries but another -n may override that
    # lgh only shows HEAD and ancestor commits
    lgh = log --color --graph --date=iso --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit -n 15
    # lg shows all branches
    lg = !git lgh --all
    # log including all branchless (rebased, amended, dropped) commits
    lga = !git lg $(git fsck --unreachable --no-reflog | grep commit | grep -o '[^ ]*$')

    # commit
    # patched commit with a file review and untracked sanity check first
    pc = !bash -c 'git status && ( [[ ! "$(git ls-files --others --exclude-standard)" ]] || ( echo "Warning: Untracked files!" && read -n 1 )) && [[ "$(git ls-files --modified)" ]] && git cm -p $1' -
    checkpoint = !git stash save --include-untracked checkpoint of WIP && git stash apply
    # remove all whitespace changes - with a checkpoint for paranoia
    rw = !git diff -w --no-color | git apply --cached --ignore-whitespace && git checkout . && git reset

    # amend and rebase
    # amend without changing git commit message
    amend = commit --amend --reuse-message=HEAD
    # --amend to a previous commit below HEAD
    fixup = !sh -c '(git diff-files --quiet || (echo "Unstaged changes, please commit or stash with --keep-index" && exit 1)) && COMMIT=$(git rev-parse $1) && git commit --fixup=$COMMIT && git rebase -i --autosquash $COMMIT~1' -
    # rebase the last n commits
    rbn = "!r() { git rebase -i HEAD~$1; }; r"

    # branch and merge
    # get latest changes even with local changes (but abort on conflicts)
    fm = !git fetch && git merge --ff-only
    purge = !git branch -d $1 && git push origin --delete
    prune-local = !sh -c 'git branch --merged | grep -v "\\*" | grep -v "master" | grep -v "develop" | xargs -n 1 git branch -d' - # git branch -d'

    # tag a version, make sure it is an annotated tag, but avoid hassle with duplicating version in commit message
    tv = "!f() { git tag -m \"Version $1\" $1; }; f"

    # gitflow, check unreleased features on develop branch
    features = !git lgh master..develop --merges -n 9999
    unpushed = !git lg --branches --not --remotes
    # fast forward develop or master without checking them out
    dup = !git fetch && git merge-base --is-ancestor develop origin/develop && git branch -f develop origin/develop
    mup = !git fetch && git merge-base --is-ancestor master origin/master && git branch -f master origin/master
[web]
    browser = google-chrome
[include]
    # local override of settings, file relative to .gitconfig. requires git 1.7.10+
    path = .gitconfig_local
[init]
    templatedir = ~/.git_template
[credential]
    helper = cache --timeout=3600
[merge]
    tool = vimdiff
[mergetool]
    keeptemporaries = false
    keepbackups = false
    prompt = false
    trustexitcode = false
